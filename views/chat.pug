extends ui_layout

block content
    .computer.only.tablet.only.row
        .five.wide.column
            .ui.segment(style='height:90vh;')
                //- #userList.ui.relaxed.divided.list
        .eleven.wide.column
            .ui.segment(style='height:90vh;')
                h2.ui.left.floated.header
                button#newChatButton.positive.ui.button.right.floated(style="margin-bottom:10px") 
                    i.pencil.alternate.icon
                    |   New Chat
                .ui.clearing.divider
                p

                .messages.container(style="height: 70vh; overflow-x: hidden; overflow-y: auto;")
                    #messages.ui.grid(style="padding-top:10px")
               
                form#messageInput(action='')
                    .ui.fluid.icon.input(style='position: absolute; bottom: 10px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                        input#input(autocomplete="off" type='text' placeholder='Enter message')
                        button
                            i.paper.plane.icon

                #userIdTag(userId=user.id)
                #usernameTag(username=user.username)

    .ui.mini.modal
        .header
            .ui.center.aligned.container
                | New Message
        .content
            #userList.ui.relaxed.divided.list
        .actions
            button.positive.ui.button.right.floated(style="margin-bottom:10px") 
                | Next


                script(src='/socket.io/socket.io.js')
                script.
                    const userId = document.getElementById('userIdTag').getAttribute('userId');
                    const username = document.getElementById('usernameTag').getAttribute('username');
                    
                    // hide input until user picks chat partner
                    $('#messageInput').hide();

                    document.getElementById('newChatButton').onclick=function(){onClickNewChat()};

                    function onClickNewChat() {
                        $('.ui.modal').modal('show');
                    }
                    
                    const URL = "http://localhost:3000";
                    const socket = io(URL, { autoConnect: false, transports: ['websocket'], upgrade: false });
                    
                    socket.onAny((event, ...args) => {
                        console.log(event, args);
                    });

                    const sessionId = localStorage.getItem("sessionId");
                    if (sessionId) {
                        socket.auth = { sessionId, username, userId};
                        socket.connect();
                    }
                    else {
                        socket.auth = { username, userId};
                        socket.connect();
                    }

                    /*socket.on("chatHistory", (history) => {
                        console.log(history)
                    })*/

                    socket.on("session", ({ sessionId, userId }) => {
                        // attach the session ID to the next reconnection attempts
                        socket.auth = { sessionId };
                        localStorage.setItem("sessionId", sessionId);
                        socket.userId = userId;
                    });

                    socket.on("connect_error", (err) => {
                        console.log(`connect_error due to ${err.message}`);
                    });

                    socket.on("userList", (userList) => {
                        userList.forEach((user) => {
                            var u = `   <div class="item"><img class="ui avatar image" src=""/>
                                            <div class="content">
                                                <div class="header">${user.username}</div>
                                            </div>
                                            <button id="oldButton" class="ui icon right floated mini button""><i class="right arrow icon"></i></button>
                                        </div>`

                            if (user.userId == userId) { // add user to top of user list
                                $('#userList').prepend(u);
                            }
                            else {
                                $('#userList').append(u);
                            }

                            // add onClick function to button
                            var element = document.getElementById("oldButton");
                            element.id = user.userId;
                            document.getElementById(user.userId).onclick=function(){onClickUsername(user)};

                            if (user.userId == userId) { // do not allow user to chat itself
                                document.getElementById(user.userId).remove();
                            }
                        });
                    });

                    let chatPartnerSocketId = null;
                    let chatPartnerUsername = null;
                    let chatPartnerUserId = null;

                    function onClickUsername(user) {
                        chatPartnerSocketId = user.socketId;
                        chatPartnerUsername = user.username;
                        chatPartnerUserId = user.userId;
                        $("h2").text(chatPartnerUsername);
                        $('#messages').empty();
                        $('#messageInput').show();
                        $('.ui.modal').modal('hide');

                        // after we get the chat partner info we want to get all messages
                         socket.emit('get-messages', {
                         to: {
                                    username: chatPartnerUsername,
                                    userId: chatPartnerUserId,
                                    socketId: chatPartnerSocketId
                                } 
                    })
                    }

                    $('#messageInput')[0].addEventListener('submit', function(e) {
                        e.preventDefault();
                        var input = $('#input')[0]; 
                        if (input.value) {
                            let date = new Date()
                            addChatSentMessage(input.value, date.toLocaleTimeString("en-US"))
                            socket.emit('send-message', { 
                                msg: {
                                    type: "txt",
                                    body: input.value
                                },
                                to: {
                                    username: chatPartnerUsername,
                                    userId: chatPartnerUserId,
                                    socketId: chatPartnerSocketId
                                } 
                            });
                            input.value = '';
                        }
                    });

                   
                    
                    socket.on("receive-message", (msg) => {
                        if (msg.from.userId == userId) {
                            addChatSentMessage(msg.msg.body, msg.msg.time);
                        }
                        else if (msg.to.userId == userId && msg.from.userId == chatPartnerUserId) {
                            addChatReceivedMessage(msg.msg.body, msg.msg.time);
                        }
                    })

                    function addChatSentMessage(msg, time) {
                        var mes = ` <div class="row" style="padding-top:6px; padding-bottom:6px">
                                        <div class="right floated right aligned seven wide column">
                                        <div class="ui mini blue compact message">
                                            <p>${msg}</p>
                                        </div>
                                        <p style="font-size:10px; margin-top:-8px">${time}</p>
                                        </div>
                                    </div>`
                        $('#messages').append(mes);
                        $('#messages').scrollTop($('#messages')[0].scrollHeight);
                    }

                    function addChatReceivedMessage(msg, time) {
                        var mes = ` <div class="row" style="padding-top:6px; padding-bottom:6px">
                                        <div class="right aligned one wide column" style="padding:0!important"><img class="ui avatar image" id="avatarImage"/></div>
                                        <div class="seven wide column">
                                        <div class="ui mini compact message">
                                            <p>${msg}</p>
                                        </div>
                                        <p style="font-size:10px; margin-top:-8px">${time}</p>
                                        </div>
                                    </div>`
                        $('#messages').append(mes);
                        $('#messages').scrollTop($('#messages')[0].scrollHeight);
                    }   
                    
//- TODO: update code for mobile view 
    .mobile.only.row
        .column
            .ui.segment
                .ui.relaxed.divided.list
                    .item
                        img.ui.avatar.image(src=user.gravatar(60))
                        .content
                            .header Person 1
                            |       ...
                        button.ui.icon.right.floated.mini.button
                            i.right.arrow.icon
                    .item
                        img.ui.avatar.image(src=user.gravatar(60))
                        .content
                            .header Person 2
                            |       ...
                        button.ui.icon.right.floated.mini.button
                            i.right.arrow.icon
                    .item
                        img.ui.avatar.image(src=user.gravatar(60))
                        .content
                            .header Person 3
                            |       ...
                        button.ui.icon.right.floated.mini.button
                            i.right.arrow.icon
    .mobile.only.row
        .column
            .ui.segment(style='height:90vh;')
                img.ui.left.floated.avatar.image(src=user.gravatar(60))
                h2.ui.left.floated.header Person
                .ui.clearing.divider
                p

                .ui.grid
                    .row
                        .eight.wide.column
                            .ui.mini.compact.message
                                p
                                    | Hello
                            p(style='font-size:10px; margin-top:-8px')
                                | 2:18 PM
                    .row
                        .right.floated.right.aligned.eight.wide.column
                            .ui.mini.blue.compact.message
                                p
                                    | Hi
                            p(style='font-size:10px; margin-top:-8px')
                                | 2:19 PM
                    .row
                        .eight.wide.column
                            .ui.mini.compact.message
                                p
                                    | long message long message long message long message long message long message
                            p(style='font-size:10px; margin-top:-8px')
                                | 2:19 PM
                    .row
                        .right.floated.right.aligned.eight.wide.column
                            .ui.mini.blue.compact.message
                                p
                                    | long message long message long message long message long message long message
                            p(style='font-size:10px; margin-top:-8px')
                                | 2:20 PM
                    
                .ui.fluid.icon.input(style='position: absolute; bottom: 10px; left: 50%; transform: translate(-50%, -50%); width:200px;')
                    input(type='text' placeholder='Enter message')
                    i.paper.plane.icon