extends ui_layout

block content
    link(rel='stylesheet' href='https://www.w3schools.com/w3css/4/w3.css')
    .row
        .five.wide.column
            .ui.segment(style='height:90vh')
                .ui.basic.buttons.fluid(style="margin-bottom:12px") 
                    #recentButton.ui.button
                        h3.ui.header(style="margin-top:2px") 
                            i.clock.outline.icon(style="margin-right:-4px") 
                            |   Recent
                    #discoverButton.ui.button
                        h3.ui.header(style="margin-top:2px") 
                            i.globe.icon(style="margin-right:-4px") 
                            |   Discover
                
                #recentChatHistory(style="margin-top:4px") 
                    #chatHistory.ui.relaxed.divided.list
           
        .eleven.wide.column
            .ui.segment(style='height:90vh')
                h2#chatPartnerName.ui.left.floated.header
                button#newChatButton.positive.ui.button.right.floated(style="margin-bottom:10px") 
                    i.pencil.alternate.icon
                    |   New Chat
                .ui.clearing.divider

                .messages.container(style="height: 70vh; overflow: hidden; display:flex; flex-direction: column-reverse; position: relative")
                    #messages.ui.grid(style="padding:10px; position: absolute; top: 0; bottom: 0; left: 0; right: -17px; overflow-y: scroll;")

                #nudge3Card.ui.card(style='position: absolute; bottom: -60px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                    .content(style='background-color: rgba(239,239,240)')
                        #closeNudge3.button.ui.circular.basic.icon.mini.right.floated.button
                            i.close.icon
                        p Risky message requesting location detected, here are some ways you can respond
                    .ui.vertical.buttons
                        #nudge3Button1.button.fluid.ui.button(style="background-color: rgba(228,241,254); margin-bottom:4px") No, thank you
                        #nudge3Button2.button.fluid.ui.button(style="background-color: rgba(228,241,254); margin-bottom:4px") Please leave me alone
                        #nudge3Button3.button.fluid.ui.button(style="background-color: rgba(228,241,254); margin-bottom:4px") I am not going to
                        #nudge3Button4.button.fluid.ui.button(style='background-color: rgba(255,0,0,0.3); font-weight: bold') Block and Report


                form#messageInput(action='')
                    .ui.fluid.icon.input(style='position: absolute; bottom: 10px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                        img#outputImage(src="#" style="width: 60px; height:auto; position: absolute; bottom: 70px; left: 50%; display: none;")
                        #sending(src="#" style="position: absolute; bottom: 50px; left: 50%; display: none;")
                            code
                                | sending...
                        input#input(autocomplete="off" type='text' placeholder='Enter message')
                        button#submitMessage(type="submit")
                            i.paper.plane.icon 
                        button(type="button" style='position: relative; right: 2px;')     
                            label.custom-file-upload(for='fileupload' )
                                i.camera.icon
                        input#fileupload(type='file' style="display: none;" name="fileupload" accept="image/*,video/mp4,video/x-m4v,video/*")
                        button#uploadImage(type="button" style='position: relative; right: 2px; display: none;') 
                        //- button#addFriendButton(type="button")
                        //-     i.plus.circle.icon
                        //-     | Add Friends
    

                #userIdTag(userId=user.id)
                #usernameTag(username=user.username)
                #userProfilePicture(userpfp = user.profile.picture ? user.profile.picture : "https://socialsimulation.s3.amazonaws.com/default-pfp.png")
 
    #newChatModal.ui.mini.modal
        .header
            .ui.center.aligned.container
                | New Message
        .content
            #userList.ui.relaxed.divided.list

    #nudge1Modal.ui.mini.modal
        #closeModalNudge1IconButton.icon.button.CloseModal
            i.close.icon
        .content
            .ui.center.aligned.container
                | This user is asking for #[strong sensitive information] which may compromise your privacy.
        #ButtonsList.actions
            .ui.two.buttons
                    #leaveModalButton.ui.basic.black.button
                        | Exit Chat
                    #blockModal1Button.ui.basic.black.button
                        strong Block User
        .ui.three.buttons
            #nudge1Button1.button.ui.basic.black.button 
                | Sorry, I don't want to share that
            #nudge1Button2.button.fluid.ui.basic.black.button 
                | I don't feel comfortable sharing that
            #nudge1Button3.button.fluid.ui.basic.black.button
                | Lol that's private information
        
                        
                    
    #nudge2NewModal.ui.mini.modal
        #closeModalNudge2IconButton.icon.button.CloseModal
            i.close.icon
        .content
            #nudge2NewModalContent.ui.center.aligned.container
                | is not in your friends list and sent you #[strong inappropriate messages.] Would you like to exit this conversation?
        #ButtonsList.actions
            .ui.three.buttons
                #leaveNudge2NewModal.button.ui.basic.black.button
                    | Exit Chat
                #leaveAndBlockNudge2NewModal.button.ui.basic.black.button
                    strong Block User
                #dismissNudge2NewModal.button.ui.basic.black.button
                    | Continue Chat

    #nudge2Modal.ui.mini.modal
        .content.center.aligned.column
            .ui.center.aligned.container
                | We detected that this user just sent you explicit content. We recommend you exercise care with the user
        .actions.ui
            #dismissModal2Button.button.ui.button
                | Dismiss

    #letOthersKnowAbout.ui.mini.modal
        .content
            #letOthersKnowAboutContent.ui.center.aligned.container    
                |
        .actions
            #dismissModalEveryoneButton.button.ui.button
                | Dismiss
    
    #newNudge4Modal.ui.mini.modal
        #closeModalNudge4IconButton.icon.button.CloseModal
            i.close.icon
        .content
            .ui.center.aligned.container
                | The last message is hidden due to potenially #[strong explicit content]. Would you like to delete this message?
                #newNudge4ModalInfoButton.icon.button.InfoButton
                    i.info.circle.icon 
        #ButtonsList.actions
            .ui.three.buttons
                #newNudge4ModalDeleteButton.button.ui.basic.black.button
                    | Hide Message
                #newNudge4ModalBlockButton.button.ui.basic.black.button
                    | Block User
                #newNudge4ModalDeleteAndUpdateButton.button.ui.basic.black.button
                    | Notify Other Users
                    
                

    
    //- #friendRequestModal.ui.mini.modal
    //-     .header Friend Request
    //-         .ui.center.aligned.container
    //-             .content
    //-                 .ui.center.aligned.container
    //-                     | You have a new friend request from this user.
    //-             .actions
    //-                 #acceptButton.button.ui.button
    //-                     | Accept
    //-                 #declineButton.button.ui.button
    //-                     | Decline
    
    //- #acceptFriendModal.ui.mini.modal
    //-     .header Friend Request
    //-         .ui.center.aligned.container
    //-             .content
    //-                 .ui.center.aligned.container
    //-                     | You have added this user as your friend.
    //-             .actions
    //-                 #confirmButton.button.ui.button
    //-                     | Confirm

    //- #declineFriendModal.ui.mini.modal
    //-     .header Friend Request
    //-         .ui.center.aligned.container
    //-             .content
    //-                 .ui.center.aligned.container
    //-                     | You have declined the friend request from this user.
    //-             .actions
    //-                 #confirm2Button.button.ui.button
    //-                     | Confirm

    script(src='/socket.io/socket.io.js')
    script.
        const userId = document.getElementById('userIdTag').getAttribute('userId');
        const username = document.getElementById('usernameTag').getAttribute('username');
        const userpfp = document.getElementById('userProfilePicture').getAttribute('userpfp');
        


        // hide input until user picks chat partner
        $('#messageInput').hide();
        $('#nudge3Card').hide();
        document.getElementById('newChatButton').onclick=function(){onClickNewChat()};
        document.getElementById('fileupload').onchange=function(){loadFile(event)};

        function onClickNewChat() {
            $('#newChatModal').modal('setting', 'closable', false).modal('show');
        }
        
        // for deployment
        // const URL = "http://18.224.25.178:3000/";
        
        // for production
        const URL = "http://localhost:3000";
        
        const socket = io(URL, { autoConnect: false, transports: ['websocket'], upgrade: false });
        
        socket.onAny((event, ...args) => {
            console.log(event, args);
        });
        
        const sessionId = localStorage.getItem("sessionId");
        if (sessionId) {
            socket.auth = { sessionId, username, userId, userpfp};
            socket.connect();
        }
        else {
            socket.auth = { username, userId, userpfp};
            socket.connect();
        }

        socket.on("session", ({ sessionId, userId }) => {
            // attach the session ID to the next reconnection attempts
            socket.auth = { sessionId };
            localStorage.setItem("sessionId", sessionId);
            socket.userId = userId;
        });

        socket.on("connect_error", (err) => {
            console.log(`connect_error due to ${err.message}`);
        });


        // this will store the user information as well as a status object:
        // status:{messaged: Boolean, active: Boolean}
        // if a user is in copiedUserList, then they are active
        // if a user is in the message convo, then they are messaged
        let completeMessageUserList = []

        // stores the ACTIVE USERS
        let copiedUserList = null;

        // used for new chat button
        let usersInUserList = [];

        let loadedHistory = false;

        // let usersInDiscover = [];

        // figure out what this is used for
        let usersInRecent = [];


        //- document.getElementById('addFriendButton').onclick = function(){onClickAddfriend()};

        //- function onClickAddfriend() {
        //-     //$('#friendRequestModal').modal('show');
        //-     const fromUserId = userId;
        //-     const toUserId = chatPartnerUserId;
        //-     const fromUserNamd = username;
            // New Chat Button Code        //-     const message = 'Friends request sent';
        //-     //- {
        //-     //-     type: 'friend-request',
        //-     //-     content: 'user' + username + ' would like to add you as a friend. Do you accept?',
        //-     //-     chatId: toUserId, // Assuming chatId is usually the recipient's ID,
        //-     //- };
            
        //-     socket.emit('send-message', { 
        //-         msg: {
        //-             type: "txt",  
        //-             body: message
        //-         },
        //-         nudge: {
        //-             nudgeShown: nudgeShown,
        //-             riskyScenario: "friendsNudge",
        //-             nudgeType: "friends",
        //-             userAction: null,
        //-         },
        //-         to: {
        //-             username: chatPartnerUsername,
        //-             userId: chatPartnerUserId,
        //-             socketId: chatPartnerSocketId
        //-         } 
        //-     });
        //- }

        


        socket.on("userList", (userList) => {
            copiedUserList = JSON.parse(JSON.stringify(userList));

            userList.forEach((user) => {
                if (!usersInUserList.includes(user.userId)) {
                    usersInUserList.push(user.userId);

                    const u = ` <div class="item">
                                    <div class="content">
                                        <div class="header">${user.username}</div>
                                    </div>
                                    <button id="rightArrowButton" class="ui icon right floated mini button" style="margin-top:-20px"><i class="right arrow icon"></i></button>
                                </div>`

                    if (user.userId == userId) { // add user to top of user list
                        $('#userList').prepend(u);
                    }
                    else {
                        $('#userList').append(u);
                    }

                    // add onClick function to button
                    let element = document.getElementById("rightArrowButton");
                    element.id = user.userId + 'rightArrowButton';
                    document.getElementById(user.userId + 'rightArrowButton').onclick=function(){onClickUsername(user.userId)};

                    if (user.userId == userId) { // do not allow user to chat itself
                        document.getElementById(user.userId + 'rightArrowButton').remove();
                    }
                }
            });

            // go through copiedUserList and push to completeMessageUserList
            // Code for the Message List, adding the ACTIVE users
            console.log('pushing copiedUserList to addToCompleteMessageUserList')
            copiedUserList.forEach(async (user) => {
                console.log('active user' + user.userId + ' ' + user.username)
                
                // NEW METHOD, figure out params
                // chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType
                console.log(user.username, null, user.userId, 0, null)
                await addToCompleteMessageUserList(user.username, null, user.userId, 0, null)
                // OLD METHOD
                // addRestOfUsers(user)
            });
                
            console.log('completeMessageUserList')
            console.log(completeMessageUserList)
            console.log('copiedUserList')
            console.log(copiedUserList)
            console.log('usersInHistory')
            console.log(usersInHistory)


            // REMOVE EVERYTHING FROM BELOW HERE, SHOULD NOT BE NEEDED WITH NEW METHOD
            /*
            // deal with any status changes in the copiedUserList
            // if you are in the copiedUserList, that means you are active, so change their status
            let activeIDs = [];
            for(let i = 0; i < copiedUserList.length; i++){
                 if(copiedUserList[i].userId != userId){
                     console.log(copiedUserList[i].userId)
                     console.log('active: activeIcon-'+ copiedUserList[i].userId )
                     console.log(document.getElementById("activeIcon-" + copiedUserList[i].userId))
                     $('#activeIcon-' + copiedUserList[i].userId).removeClass().addClass("green circle icon")
                     activeIDs.push(copiedUserList[i].userId)
                 }
            }
            
            
            // the rest of the users are not active, so change their status for usersInHistory
            for(let i = 0; i < usersInHistory.length; i++){
                // check if copiedUserList contains user
                let contains = false;
                
                for(let j = 0; j < copiedUserList.length; j++){
                    if(copiedUserList[j].userId == usersInHistory[i].userId){
                        contains = true;
                    }
                }

                if(!contains && usersInHistory[i].userId != userId){
                    console.log(usersInHistory[i].userId)
                    console.log('inactive: activeIcon-'+ usersInHistory[i].userId)
                    console.log(document.getElementById("activeIcon-" + usersInHistory[i].userId))
                    $('#activeIcon-' + usersInHistory[i].userId).removeClass().addClass("orange moon icon")
                }
            }
            // change active to inactive for usersInRecentList
            for(let i = 0; i < usersInRecentList.length; i++){
                // check if copiedUserList contains user
                let contains = false;
                
                for(let j = 0; j < copiedUserList.length; j++){
                    if(copiedUserList[j].userId == usersInRecentList[i].userId){
                        contains = true;
                    }
                }
                if(!contains && usersInRecentList[i].userId != userId){
                    console.log(usersInRecentList[i].userId)
                    console.log('inactive: activeIcon-'+ usersInRecentList[i].userId)
                    console.log(document.getElementById("activeIcon-" + usersInRecentList[i].userId))
                    $('#activeIcon-' + usersInRecentList[i].userId).removeClass().addClass("orange moon icon")
                }
            }
        
        
            // if you are not in copiedUserList and are in usersInRecentList 
            console.log('usersInRecentList')
            console.log(usersInRecentList)
            console.log('copiedUserList')
            console.log(copiedUserList)
             for(let i = 0; i < usersInRecentList.length; i++){
                let contains = false;
                
                for(let j = 0; j < copiedUserList.length; j++){
                    if(copiedUserList[j].userId == usersInRecentList[i].userId){
                        contains = true;
                    }
                }

                if(!contains){
                    console.log('remove: ')
                    console.log(usersInRecentList[i])
                    $(`#listItemChatPartner-${usersInRecentList[i].userId}`).remove();
                    usersInRecentList.filter((userInFilter)=> userInFilter.userId != usersInRecentList[i].userId)
                }
            }
            */
        

        });

        let usersInHistory = [];

        let numUnread = 0;
        /*
        OLD METHODS
        // HANDLES THE MESSAGED USERS (ACTIVE AND INACTIVE)
        async function addUserInHistory(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType) {
            let lastmsg = lastMessage;
            if (msgType == "img" || msgType == "vid") {
                lastmsg = "Sent media"
            }

            if (usersInRecent.includes(chatPartnerId)) {
                return;
            }
            usersInRecent.push(chatPartnerId);
            
            // if the userID is already in the usersInRecentList, than directly edit the item
            // else, add a new item
            let found = false;
            for(let i = 0; i < usersInRecentList.length; i++){
                if(usersInRecentList[i].userId == chatPartnerId){
                    console.log("found user userinRecentList")
                    found = true;
                    break;
                }
            }
            for(let i = 0; i < usersInHistory.length; i++){
                if(usersInHistory[i].userId == chatPartnerId){
                    console.log("found user userInHistory")
                    found = true;
                    break;
                }
            }
            if(found){
                console.log("found user")
                $(`#listItemChatPartner-${chatPartnerId}`).remove();
                const listItem = `<div class="item" id="listItemChatPartner-${chatPartnerId}" style="display: flex; flex-direction: row; justify-content: space-between;">
                                    <div style="display: flex; flex-direction: row; justify-content: flex-start;">
                                        <div style="position: relative;">
                                            <span id="redBubble" class="w3-badge w3-gray" style="z-index:10; position: absolute; color: white !important"></span>
                                            <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                            <i id="activeIcon-${chatPartnerId}" style="position: absolute; bottom: 0; left: 0;" class="${activeClass}"></i>
                                        </div>
                                        <div class="content">
                                            <a class="header" href="http://localhost:3000/user/${chatPartnerId}">${chatPartnerUsername}</a>
                                            <div class="description" style="max-width: 180px" id="lastMessage">${lastmsg}</div>
                                        </div>
                                    </div>
                                    <button id="rightChevronButton" style="margin-left: auto;" class="ui icon right floated mini button"><i class="angle right icon"></i></button>
                                </div>`;

                $('#chatHistory').prepend(listItem);
            } else{
                const listItem = `<div class="item" id="listItemChatPartner-${chatPartnerId}" style="display: flex; flex-direction: row; justify-content: space-between;">
                                        <div style="display: flex; flex-direction: row; justify-content: flex-start;">
                                            <div style="position: relative;">
                                                <span id="redBubble" class="w3-badge w3-gray" style="z-index:10; position: absolute; color: white !important"></span>  
                                                <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                                <i id="activeIcon-${chatPartnerId}" style="position: absolute; bottom: 0; left: 0;"class="${activeClass}"></i>
                                            </div>    
                                            <div class="content">
                                                <a class="header" href="http://localhost:3000/user/${chatPartnerId}">${chatPartnerUsername}</a>
                                                <div class="description" style="max-width: 180px" id="lastMessage">${lastmsg}</div>
                                            </div>
                                        </div>
                                        <button id="rightChevronButton" style="margin-left: auto;" class="ui icon right floated mini button"><i class="angle right icon"></i></button>
                                    </div>`;

            $('#chatHistory').append(listItem);

            await socket.emit("find-partner",{userId: chatPartnerId})
            await socket.on("partner-pfp",({pfp , userId})=>{
                if (pfp != null && userId == chatPartnerId) {
                    let pic = `https://socialsimulation.s3.amazonaws.com/${pfp}`;
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = pic;
                }
                else if (userId == chatPartnerId) {
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = "https://socialsimulation.s3.amazonaws.com/default-pfp.png";
                }
            })

            let element = document.getElementById("lastMessage");
            element.id = chatPartnerId + 'lastMessage';

            element = document.getElementById("redBubble");
            element.id = chatPartnerId + 'redBubble';
            $('#' + chatPartnerId + 'redBubble').hide();
            $('#' + chatPartnerId + 'redBubble').text(0);

            element = document.getElementById("rightChevronButton");
            element.id = chatPartnerId + 'rightChevronButton';
            document.getElementById(chatPartnerId + 'rightChevronButton').onclick=function(){onClickUsername(chatPartnerId)};

            $('#' + chatPartnerId + 'redBubble').text(numUnread);
            if (numUnread > 0) {
                $('#' + chatPartnerId + 'redBubble').show();
            }
        }

        // make this the main function to handle adding user to the singular tab -> use messages list, copiedUserList, and usersInHistory
        // make sure to not add the user if already in the list
        // DEALS WITH THE USERS THAT ARE ACTIVE AND HAVE NOT BEEN MESSAGED
        async function addRestOfUsers(user){
            let chatPartnerId = user.userId
            let chatPartnerUsername = user.username
            
            console.log("addRestOfUsers")
            console.log({id: chatPartnerId, name: chatPartnerUsername})
            console.log({selfID: userId, selfName: username})
            if(chatPartnerId == userId){
                return;
            }
            // check if usersInRecentList has the same userId
            for(let i = 0; i < usersInRecentList.length; i++){
                if(usersInRecentList[i].userId == chatPartnerId){
                    return;
                }
            }
            // check if usersInHistory has the same userId
            for(let i = 0; i < usersInHistory.length; i++){
                if(usersInHistory[i].userId == chatPartnerId){
                    return;
                }
            }

            const listItem = `<div class="item" id="listItemChatPartner-${chatPartnerId}" style="display: flex; flex-direction: row; justify-content: space-between;">
                                <div style="display: flex; flex-direction: row; justify-content: flex-start;">
                                    <div style="position: relative;">
                                        <span id="redBubble" class="w3-badge w3-gray" style="z-index:10; position: absolute; color: white !important"></span>
                                        <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                        <i id="activeIcon-${chatPartnerId}" style="position: absolute; bottom: 0; left: 0;" class="green circle icon"></i>
                                    </div>

                                    <div class="content">
                                        <a class="header" href="http://localhost:3000/user/${chatPartnerId}">${chatPartnerUsername}</a>
                                        <div class="description" style="max-width: 180px" id="lastMessage">Start a Conversation!</div>
                                    </div>
                                </div>
                                <button id="rightChevronButton" style="margin-left: auto;"class="ui icon right floated mini button"><i class="angle right icon"></i></button>
                            </div>`;

            $('#chatHistory').append(listItem);
            usersInRecentList.push({userId: chatPartnerId, username: chatPartnerUsername});
            

            await socket.emit("find-partner",{userId: chatPartnerId})
            await socket.on("partner-pfp",({pfp , userId})=>{
                if (pfp != null && userId == chatPartnerId) {
                    let pic = `https://trumanprofilepictures.s3.amazonaws.com/${pfp}`;
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = pic;
                }
                else if (userId == chatPartnerId) {
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = "https://trumanprofilepictures.s3.amazonaws.com/default-pfp.png";
                }
            })

            let element = document.getElementById("rightChevronButton");
            element.id = chatPartnerId + 'rightChevronButton';
            document.getElementById(chatPartnerId + 'rightChevronButton').onclick=function(){onClickUsername(chatPartnerId)};

        }
        */

        let blocked = [];
        let isBlocked = [];

        // only called at the beginning of the page load
        socket.on("receive-chat-history", (allConvo) => {
            console.log("CURR receive-chat-history")
            console.log(allConvo)
            alLConversations = allConvo;

            usersInHistory = [];

            loadedHistory = true;

            allConvo.forEach(async (chatPartner) => {
                let chatPartnerUsername = chatPartner.usernameA == username ? chatPartner.usernameB : chatPartner.usernameA;
                let chatPartnerId = chatPartner.userIdA == userId ? chatPartner.userIdB : chatPartner.userIdA;
                let lastMessage = ""
                let msgType = chatPartner.content[chatPartner.content.length - 1].msg.type
           
                if (chatPartner.blocked == chatPartnerId) {
                    blocked.push(chatPartnerId);
                }
                
                if (chatPartner.blocked == userId) {
                    isBlocked.push(chatPartnerId);
                }

                if (chatPartner.content[chatPartner.content.length - 1].msg.type == "txt")
                    if (chatPartner.content[chatPartner.content.length - 1].from.userId == userId) { // chat sent
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    }
                    else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && (chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "deleteMessage" || chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "deleteMessageAndLetOthersKnow")) {
                        lastMessage = "Deleted message"
                    }
                    else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "") {
                        lastMessage = "Unread message"
                    }
                    else {
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    }
                else {
                    lastMessage = "Sent media"
                }

                let found = false;
                // make sure duplicates aren't being pushed to usersInHistory
                for(let i = 0; i < usersInHistory.length; i++){
                    if(usersInHistory[i].userId == chatPartnerId){
                        found = true;
                        break
                    }
                }
                if(!found){
                    usersInHistory.push({userId: chatPartnerId, username: chatPartnerUsername, userpfp: chatPartnerPFP});
                }
                numUnread = chatPartner.content.filter(c => c.from.userId == chatPartnerId).filter(c => !c.msg.read).length

                // add to and push to completeMessageUserList
                console.log(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType)
                await addToCompleteMessageUserList(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType)
                
                // OLD METHOD
                // addUserInHistory(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType);
            });

            // TO BE REMOVED
            console.log('usersInHistory')
            console.log(usersInHistory)
            console.log('usersInRecentList')
            console.log(usersInRecentList)
            console.log('copiedUserList')
            console.log(copiedUserList)
            console.log('completeMessageUserList', completeMessageUserList)

        }); 

        // deals with adding all of the users to the completeMessageUserList
        // TODO: MAKE SURE TO DEAL WITH ANY REFERENCES TO copiedUserList, usersInRecentList, usersInHistory
        // TODO: ONCE EVERYTHING WORKS, REMOVE usersInRecentList
        async function addToCompleteMessageUserList(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType){
            // console log the methods params
            console.log('addToCompleteMessageUserList')
            console.log(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType)
            // make sure user is not SELF
            const status = {
                active: false,
                messaged: false
            }
            const self = {
                userId: userId,
                username: username
            }

            console.log(self)
            console.log(chatPartnerId)
            if (chatPartnerId == self.userId) {
                return;
            }
        
            // check if user is in completeMessageUserList, if not then push to list
            console.log(!completeMessageUserList.some(e => e.userId == chatPartnerId))
            if (!completeMessageUserList.some(e => e.userId == chatPartnerId)) {
                // TODO: GIVE PROPER NAMES FOR CONSISTENCY
                completeMessageUserList.push({username: chatPartnerUsername, userId: chatPartnerId, status:{active: false, messaged: false}});
            }
            console.log(completeMessageUserList)
            // determine if active, use copiedUserList
            // check if user is in copiedUserList, if so then change status to active
            if (copiedUserList.some(e => e.userId == chatPartnerId)) {
                console.log(completeMessageUserList)
                completeMessageUserList.find(e => e.userId == chatPartnerId).status.active = true;
                status.active = true;
            }

            // determine if messaged, use usersInHistory
            // check if user is in usersInHistory, if so then change status to messaged
            if (usersInHistory.some(e => e.userId == chatPartnerId)) {
                completeMessageUserList.find(e => e.userId == chatPartnerId).status.messaged = true;
                status.messaged = true;
            }

            // if listItemChatPartner-<chatPartnerId> exists, remove it
            if (document.getElementById(`listItemChatPartner-${chatPartnerId}`)) {
                $(`#listItemChatPartner-${chatPartnerId}`).remove();
            }
            
            // if active & messaged look AT addUserInHistory
            // if active & not messaged LOOK AT addRestOfUsers
            // if inactive & messaged look AT addUserInHistory
            
            // if inactive && not messaged, just remove from the list
            if (!status.active && !status.messaged) {
                // remove from actual list
                completeMessageUserList = completeMessageUserList.filter(e => e.userId != chatPartnerId);
                return;
            }
            
            let activeClass = ''
            // if active, then change activeClass to green circle icon, else orange moon icon
            if(status.active){
                activeClass = 'green circle icon'
            } else{
                activeClass = 'orange moon icon'
            }
            // if lastMessage is null or not messaged, then set lastMessage to "start a conversation"
            if(!lastMessage || !status.messaged){
                lastMessage = 'Start a conversation!'
            }
            let lastmsg = lastMessage;
            if (msgType == "img" || msgType == "vid") {
                lastmsg = "Sent media"
            }

            const listItem = `<div class="item" id="listItemChatPartner-${chatPartnerId}" style="display: flex; flex-direction: row; justify-content: space-between;">
                        <div style="display: flex; flex-direction: row; justify-content: flex-start;">
                            <div style="position: relative;">
                                <span id="${chatPartnerId}redBubble" class="w3-badge w3-gray" style="z-index:10; position: absolute; color: white !important"></span>  
                                <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                <i id="activeIcon-${chatPartnerId}" style="position: absolute; bottom: 0; left: 0;"class="${activeClass}"></i>
                            </div>    
                            <div class="content">
                                <a class="header" href="http://localhost:3000/user/${chatPartnerId}">${chatPartnerUsername}</a>
                                <div class="description" style="max-width: 180px" id="${chatPartnerId}lastMessage">${lastmsg}</div>
                            </div>
                        </div>
                        <button id='${chatPartnerId}rightChevronButton' style="margin-left: auto;" class="ui icon right floated mini button"><i class="angle right icon"></i></button>
                    </div>`;


            // if active, prepend to the list; else append to the list
            if(status.active){
                $('#chatHistory').prepend(listItem);
            } else{
                $('#chatHistory').append(listItem);
            }
            
            await socket.emit("find-partner",{userId: chatPartnerId})
            await socket.on("partner-pfp",({pfp , userId})=>{
                if (pfp != null && userId == chatPartnerId) {
                    let pic = `https://trumanprofilepictures.s3.amazonaws.com/${pfp}`;
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = pic;
                }
                else if (userId == chatPartnerId) {
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = "https://trumanprofilepictures.s3.amazonaws.com/default-pfp.png";
                }
            })


            $('#' + chatPartnerId + 'redBubble').hide();
            $('#' + chatPartnerId + 'redBubble').text(0);
            
            document.getElementById(chatPartnerId+'rightChevronButton').onclick=function(){onClickUsername(chatPartnerId)};

            $('#' + chatPartnerId + 'redBubble').text(numUnread);
            if (numUnread > 0) {
                $('#' + chatPartnerId + 'redBubble').show();
            }
        
        }


        function onClickProfile(userId) {
            window.location.href = "/user/" + userId;
        }


        let chatPartnerSocketId = null;
        let chatPartnerUsername = null;
        let chatPartnerUserId = null;
        let chatPartnerPFP = "https://socialsimulation.s3.amazonaws.com/default-pfp.png";

        function onClickUsername(userId) {
            console.log('OPENING CHAT PANEL BETWEEN THE TWO USERS')
            $('#' + userId + 'redBubble').hide();
            $('#' + userId + 'redBubble').text(0);

            // find user in online list
            copiedUserList.forEach((user) => {
                if (user.userId == userId) {
                    chatPartnerSocketId = user.socketId;
                    chatPartnerUsername = user.username;
                    chatPartnerUserId = user.userId;
                }
            });

            // find user in chat history
            usersInHistory.forEach((user) => {
                if (user.userId == userId) {
                    chatPartnerUsername = user.username;
                    chatPartnerUserId = user.userId;
                }
            });

            socket.emit("find-partner",{userId: chatPartnerUserId})

            socket.on("partner-pfp",({ pfp, userId})=>{
                if (pfp != null && userId == chatPartnerUserId) {
                    chatPartnerPFP = `https://socialsimulation.s3.amazonaws.com/${pfp}`;
                }
            })
            
            $("#chatPartnerName").text(chatPartnerUsername);
            $('#messages').empty();
            $('#messageInput').show();
            $('#newChatModal').modal('hide');

            // after we get the chat partner info we want to get all messages
            socket.emit('get-messages', {
                to: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                    }
            })
        }

        // researcher set variable to show nudges
        let nudgeShown = true;

        let nudge3MessageId = null;

        document.getElementById('nudge3Button1').onclick=function(){onClickNudge3Button1()};
        function onClickNudge3Button1() {
            $('#nudge3Card').hide();
            sendMessage("No, thank you");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        document.getElementById('nudge3Button2').onclick=function(){onClickNudge3Button2()};
        function onClickNudge3Button2() {
            $('#nudge3Card').hide();
            sendMessage("Please leave me alone");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        document.getElementById('nudge3Button3').onclick=function(){onClickNudge3Button3()};
        function onClickNudge3Button3() {
            $('#nudge3Card').hide();
            sendMessage("I am not going to");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        document.getElementById('nudge3Button4').onclick=function(){onClickNudge3Button4()};
        function onClickNudge3Button4() {
            $('#nudge3Card').hide();
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "blockUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        socket.on("blocked", async (msg) => { // this user blocked
            const chatPartnerID = chatPartnerUserId
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has blocked you</b></p>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            $('#messageInput').hide();
            await location.reload()
            await onClickUsername(chatPartnerID)
        });

        socket.on("block-success", async (msg) => { // blocked chat partner
            const chatPartnerID = chatPartnerUserId
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has been blocked</b></p>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            $('#messageInput').hide();
            await location.reload()
            await onClickUsername(chatPartnerID)
        });

        async function sendMessage(msg) {
            await socket.emit('send-message', { 
                msg: {
                    type: "txt",
                    body: msg
                },
                nudge: {
                    nudgeShown: nudgeShown,
                    riskyScenario: null,
                    nudgeType: null,
                    userAction: null,
                },
                to: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                    socketId: chatPartnerSocketId
                } 
            });
        }

        const infoBreach1 = "Which school do you go to?";
        const infoBreach2 = "http://www.hahpics.xyz/4034-349i/";
        const infoBreach3 = "just finished ffrm my school here in orlando wat is ur house address";
        const infoBreach3New = "I’d love to get to know u better"

        //const friendsNudge = "Friends request sent";
        const explicitContent1 = "explicitContent1.png";

        $('#messageInput')[0].addEventListener('submit', async function(e) {
            e.preventDefault();
            const input = $('#input')[0]; 
            let riskyScenario = null;
            let nudgeType = null;
            if (input.value) {
                if (input.value == infoBreach1) {
                    riskyScenario = "infoBreach1"
                    nudgeType = "abstinence";
                }
                else if (input.value == infoBreach2) {
                    riskyScenario = "infoBreach2"
                    nudgeType = "sensitivityFilter";
                }
                else if (input.value == infoBreach3) {
                    riskyScenario = "infoBreach3"
                    nudgeType = "guidedActions";
                }
                else if(input.value == infoBreach3New){
                    console.log(infoBreach3New)
                    riskyScenario = "infoBreach3New"
                    nudgeType = "userActions";
                }

                $('#nudge3Card').hide();
                console.log('send-message')
                e.stopPropagation();
                await socket.emit('send-message', { 
                    msg: {
                        type: "txt",
                        body: input.value
                    },
                    nudge: {
                        nudgeShown: nudgeShown,
                        riskyScenario: riskyScenario,
                        nudgeType: nudgeType,
                        userAction: null,
                    },
                    to: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                        socketId: chatPartnerSocketId
                    } 
                });
                input.value = '';
            }

            let file = uploadImage();
            
            if (file) {
                if (file.type.includes("image")) {
                    if (file.name == explicitContent1) {
                        riskyScenario = "explicitContent1"
                        nudgeType = "abstinence";
                    }
                    socket.emit('send-message', { 
                        msg: {
                            type: "img",
                            body: {path: file, filename: file.name}
                        },
                        nudge: {
                            nudgeShown: nudgeShown,
                            riskyScenario: riskyScenario,
                            nudgeType: nudgeType,
                            userAction: null,
                        },
                        to: {
                            username: chatPartnerUsername,
                            userId: chatPartnerUserId,
                            socketId: chatPartnerSocketId
                        } 
                    });
                    document.getElementById("sending").style.display = "block"
                }
                else if (file.type.includes("video")) {
                    socket.emit('send-message', { 
                        msg: {
                            type: "vid",
                            body: {path: file, filename: file.name}
                        },
                        to: {
                            username: chatPartnerUsername,
                            userId: chatPartnerUserId,
                            socketId: chatPartnerSocketId
                        } 
                    });
                    document.getElementById("sending").style.display = "block"
                }
            }
        });

        // upload image
        function uploadImage () {
            let pictureFile;
            
            if (fileupload.files[0]) {

                if (fileupload.files[0].size >= 10000000) {
                    return null;
                }
                    pictureFile = fileupload.files[0]
                    document.getElementById('fileupload').value = "";
                    return pictureFile;
            }
            return null;
        }

        async function loadFile(event) {
            const image = document.getElementById('outputImage');
            const reader = new FileReader();
 
            if (fileupload.files[0]) {

                if (fileupload.files[0].size >= 10000000) {
                    alert("Image Size too large!")
                    fileupload.files[0] = null;
                    return;
                }

                if (fileupload.files[0].type.includes("image")) {
                    reader.readAsDataURL(fileupload.files[0])
                    reader.onload = function(e) {
                        const result = reader.result;
                        image.src = result;  
                        image.style.display = "block";
                    };

                }

                if (fileupload.files[0].type.includes("video")) {
                    reader.readAsDataURL(fileupload.files[0])
                    reader.onload = function(e) {
                        const result = reader.result;
                        image.src = "https://cdn.iconscout.com/icon/free/png-256/video-file-85-1120664.png";  
                        image.style.display = "block"
                    };
                }
            }
        }

        document.getElementById('newNudge4ModalInfoButton').onclick=function(){
            window.location.href = '/risk_information'
        }

        // get all messages
        socket.on("message-list", (messageList) => {
            let messageIds = [];
            for (let i = 0; i < messageList.length; i++) {
                if (messageList[i].from.userId == userId) {
                    addChatSentMessage(messageList[i].msg, messageList[i].msg.time, messageList[i]._id );
                    loadReactions(messageList[i].msg.reactions, messageList[i]._id)
                }
                else  {
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach1) {
                        document.getElementById('closeModalNudge1IconButton').onclick=function(){onClickShowMeModal(messageList[i])}
                        document.getElementById('blockModal1Button').onclick=function(){blockUserModal1(messageList[i])}
                        document.getElementById('leaveModalButton').onclick=function(){leaveUserModal(messageList[i])}
                        document.getElementById('nudge1Button1').onclick=function(){onClickNudge3Button1(messageList[i])}
                        document.getElementById('nudge1Button2').onclick=function(){onClickNudge3Button2(messageList[i])}
                        document.getElementById('nudge1Button3').onclick=function(){onClickNudge3Button3(messageList[i])}
                        $('#nudge1Modal').modal('setting', 'closable', false).modal('show');
                        
                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].nudge.riskyScenario == "explicitContent1") {
                        console.log('link nudge')
                        $('#nudge2Modal').modal('setting', 'closable', false).modal('show');
                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach3) {
                        console.log('CARD NUDGE')
                        $('#nudge3Card').show();
                        nudge3MessageId = messageList[i]._id;
                    }
                    if(nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach3New){
                        console.log(infoBreach3New)
                        document.getElementById('dismissNudge2NewModal').onclick=function(){onClickShowMeModal(messageList[i])}
                        document.getElementById('leaveNudge2NewModal').onclick=function(){leaveUserModal(messageList[i])}
                        document.getElementById('leaveAndBlockNudge2NewModal').onclick=function(){blockUserModal1(messageList[i])}
                        document.getElementById('closeModalNudge2IconButton').onclick=function(){onClickShowMeModal(msg)}

                        let nudge2ContentText = chatPartnerUsername + ' is not in your friends list and sent you #[strong inappropriate messages.] Would you like to exit this conversation?'
                        $('#nudge2NewModalContent').html(nudge2ContentText)
                        
                        $('#nudge2NewModal').modal('setting', 'closable', false).modal('show')
                        
                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach2) {
                        document.getElementById('newNudge4ModalBlockButton').onclick=function(){blockUserModal1(messageList[i])};
                        document.getElementById('newNudge4ModalDeleteButton').onclick=function(){onClickNewDeleteButton(messageList[i])};
                        document.getElementById('newNudge4ModalDeleteAndUpdateButton').onclick=function(){onClickNewDeleteAndUpdateButton(messageList[i])};
                        document.getElementById('closeModalNudge4IconButton').onclick=function(){onClickShowMeModal(messageList[i])};
                        $('#newNudge4Modal').modal('setting', 'closable', false).modal('show')
                        console.log('newNudge4Modal show')
                        
                        //addNudgeType2(messageList[i]);
                    }
                    //- if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == friendsNudge) {
                    //-     $('#friendRequestModal').modal('show');
                    //- }
                    else {
                        
                        if(!(nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach2)){
                            console.log('adding message: ' +  messageList[i].msg.body )
                            addChatReceivedMessage(messageList[i].msg, messageList[i].msg.time, messageList[i]._id, messageList[i].from.userId, messageList[i].nudge, false);
                            loadReactions(messageList[i].msg.reactions, messageList[i]._id)
                        } else{
                            console.log('not adding link explicit')
                        }
                    }
                }
                if (messageList[i].to.userId == userId && !messageList[i].msg.rea) {
                    messageIds.push(messageList[i]._id);
                }
            }
            socket.emit("read-messages", {
                messageIds: messageIds,
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });

            if (blocked.includes(chatPartnerUserId)) {
                const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has been blocked and reported</b></p>
                        </div>`
                $('#messages').append(mes);
                $('#messages').scrollTop($('#messages')[0].scrollHeight);
                $('#messageInput').hide();
            }

            if (isBlocked.includes(chatPartnerUserId)) {
                const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has blocked you</b></p>
                        </div>`
                $('#messages').append(mes);
                $('#messages').scrollTop($('#messages')[0].scrollHeight);
                $('#messageInput').hide();
            }
        });

        function onClickDismissButton() {
            $('#nudge1Modal').modal('hide');
            $('#nudge2Modal').modal('hide');
            $('#nudge2NewModal').modal('hide');
            $('#newNudge4Modal').modal('hide')
            $('#letOthersKnowAbout').modal('hide');
        }

        document.getElementById('dismissModal2Button').onclick=function(){onClickDismissButton()};

        document.getElementById('closeNudge3').onclick=function(){onClickCloseNudge3Button()};
        function onClickCloseNudge3Button() {
            $('#nudge3Card').hide();
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "showMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text(msg.msg.body);
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
        } 

        socket.on("receive-message", async (msg) => {
            // update latest message in recent chat history
            let nudge2NewShown = false;
            let nudge1NewShown = false;
            partnerId = msg.from.userId == userId ? msg.to.userId : msg.from.userId;

            if (msg.from.userId == userId) {
                if (msg.msg.type == "img" || msg.msg.type == "vid") {
                    $('#' + partnerId + 'lastMessage').text("Sent media");
                }
                else {
                    $('#' + partnerId + 'lastMessage').text(msg.msg.body);
                }
            }
            else if (msg.msg.type == "txt" && msg.nudge.nudgeType == "sensitivityFilter" && msg.nudge.userAction == "") {
                $('#' + partnerId + 'lastMessage').text("Unread message");
            }
            else if (msg.msg.type == "txt") {
                $('#' + partnerId + 'lastMessage').text(msg.msg.body);
            }
            else {
                $('#' + partnerId + 'lastMessage').text("Sent media");
            }

            partnerUsername = msg.from.username == username ? msg.to.username : msg.from.username;
            partnerPFP = msg.from.username == username ? msg.to.userpfp : msg.from.userpfp;

            const userInDiscover = !usersInHistory.some(user => {
                if (user.userId == partnerId) {
                    return true;
                }
            });
            // TODO MAKE THIS THE OLD CODE

            if (userInDiscover) {
                if (msg.to.userId == userId) {
                    // addUserInHistory(partnerUsername, msg.msg.body, partnerId, 1, msg.msg.type);
                    // add to and push to completeMessageUserList
                    await addToCompleteMessageUserList(partnerUsername, msg.msg.body, partnerId, 1, msg.msg.type);
                }
                else {
                    // addUserInHistory
                    // add to and push to completeMessageUserList
                await addToCompleteMessageUserList(partnerUsername, msg.msg.body, partnerId, 0, msg.msg.type);
                
                }
                
                //$('#recentButton').show();
                //onClickRecentButton();
                let found = false;
                // make sure duplicates aren't being pushed to usersInHistory
                for(let i = 0; i < usersInHistory.length; i++){
                    if(usersInHistory[i].userId == chatPartnerId){
                        found = true;
                        break
                    }
                }
                if(!found){
                    usersInHistory.push({userId: chatPartnerId, username: chatPartnerUsername, userpfp: chatPartnerPFP});
                }
    
            }
            if (msg.from.userId == userId) {
                addChatSentMessage(msg.msg, msg.msg.time, msg._id);
            }
            else if (msg.to.userId == userId && msg.from.userId == chatPartnerUserId) {
                if (nudgeShown && msg.msg.body == infoBreach1) {
                    console.log(infoBreach1)
                    nudge1NewShown = true;
                    document.getElementById('closeModalNudge1IconButton').onclick=function(){onClickShowMeModal(msg)}
                    document.getElementById('blockModal1Button').onclick=function(){blockUserModal1(msg)}
                    document.getElementById('leaveModalButton').onclick=function(){leaveUserModal(msg)}
                    document.getElementById('nudge1Button1').onclick=function(){onClickNudge3Button1(msg)}
                    document.getElementById('nudge1Button2').onclick=function(){onClickNudge3Button2(msg)}
                    document.getElementById('nudge1Button3').onclick=function(){onClickNudge3Button3(msg)}
                    $('#nudge1Modal').modal('setting', 'closable', false).modal('show');
                }
                if (nudgeShown && msg.nudge.riskyScenario == "explicitContent1") {
                    $('#nudge2Modal').modal('setting', 'closable', false).modal('show');
                }
                if (nudgeShown && msg.msg.body == infoBreach3) {
                    console.log('CARD NUDGE')
                    $('#nudge3Card').show();
                    nudge3MessageId = msg._id;
                }
                if (nudgeShown && msg.msg.body == infoBreach2) {
                    // deals with newNudge4 buttons
                    console.log('newNudge4Modal show')
                    nudge2NewShown = true;
                    document.getElementById('newNudge4ModalBlockButton').onclick=function(){blockUserModal1(msg)};
                    document.getElementById('newNudge4ModalDeleteButton').onclick=function(){onClickNewDeleteButton(msg)};
                    document.getElementById('newNudge4ModalDeleteAndUpdateButton').onclick=function(){onClickNewDeleteAndUpdateButton(msg)};
                    document.getElementById('closeModalNudge4IconButton').onclick=function(){onClickShowMeModal(msg)};
                    $('#newNudge4Modal').modal('setting', 'closable', false).modal('show')
                    
                }
                if (nudgeShown && msg.msg.body == infoBreach3New){
                    console.log(infoBreach3New)
                    document.getElementById('dismissNudge2NewModal').onclick=function(){onClickShowMeModal(msg)}
                    document.getElementById('leaveNudge2NewModal').onclick=function(){leaveUserModal(msg)}
                    document.getElementById('leaveAndBlockNudge2NewModal').onclick=function(){blockUserModal1(msg)}
                    document.getElementById('closeModalNudge2IconButton').onclick=function(){onClickShowMeModal(msg)}

                    let nudge2ContentText = chatPartnerUsername + ' is not in your friends list and sent you #[strong inappropriate messages.] Would you like to exit this conversation?'
                    $('#nudge2NewModalContent').html(nudge2ContentText)
                        
                    $('#nudge2NewModal').modal('setting', 'closable', false).modal('show')
                }

                else {
                    console.log(nudge2NewShown, nudge1NewShown)
                    if(!nudge2NewShown && !nudge1NewShown){
                        console.log('adding adding message: ' +  msg.msg.body)
                        addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
                    } else{
                        console.log('not adding the bad link')
                        nudge2NewShown = false;
                        nudge1NewShown = false;
                    }
                }
                socket.emit("read-messages", {
                    messageIds: [msg._id],
                    other: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                    }
                });
            }
            else if (msg.to.userId == userId) {
                console.log("updating", Number($('#' + msg.from.userId + 'redBubble').text()) + 1);
                $('#' + msg.from.userId + 'redBubble').text(Number($('#' + msg.from.userId + 'redBubble').text()) + 1);
                $('#' + msg.from.userId + 'redBubble').show();
            }

            document.getElementById("outputImage").style.display = "none"
            document.getElementById("sending").style.display = "none"
            document.getElementById("outputImage").src = "#"
        });
        

        function onClickNudge3Button1(msg){
            onClickDismissButton();
            sendMessage("Sorry, I don't want to share that");
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        
        function onClickNudge3Button2(msg){
            onClickDismissButton();
            sendMessage("I don't feel comfortable sharing that");
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        function onClickNudge3Button3(msg){
            onClickDismissButton();
            sendMessage("Lol that's private information");
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        
        function onClickShowMeModal(msg) {
            onClickDismissButton();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "showMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text(msg.msg.body);
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
        }

        // blocks user based upon msg for nudge 1
        function blockUserModal1(msg){
            onClickDismissButton()
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "blockUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });

        }

        function leaveUserModal(msg){
            onClickDismissButton();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "leaveUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            // redirect to feed page
            window.location.href = '/'
        }

        function sendReaction(msg, person, reactionType, messageID) {
            let currentReaction;

            // get current reaction of message
            if ( person == "self") {
                currentReaction = document.getElementById(`${messageID}-reactArea2`).innerHTML;
            }
            else {
                currentReaction = document.getElementById(`${messageID}-reactArea1`).innerHTML;
            }

            rct = emojiToText(currentReaction)

            if (rct == reactionType) { // if new reaction equal current reaction
                reactionType = "none"   //change to none
            }

            socket.emit('send-reaction', {
                messageID: messageID,
                person: person,
                reactionType: reactionType,
                reactions: msg.reactions,
                to: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                        socketId: chatPartnerSocketId
                } 
            });
            document.getElementById(`${messageID}-react`).style.display = "none"
        }

        socket.on('receive-reaction',({reactions, messageID, reactionType, person}) => {
            let emoji = "none";
            emoji = textToEmoji(reactionType) 

            if (person == "self") {
                let selfElement = document.getElementById(`${messageID}-reactArea2`);
                selfElement.innerHTML = `${emoji}`;
            } else {
                let otherElement= document.getElementById(`${messageID}-reactArea1`);
                otherElement.innerHTML = `${emoji}`;
            }
        })




        // triggered when the user gets all messages
        function loadReactions(reactions, messageID) {
            let selfEmoji = "none";
            let otherEmoji = "none";

            selfEmoji = textToEmoji(reactions.self)
            let selfElement = document.getElementById(`${messageID}-reactArea2`);
            selfElement.innerHTML = `${selfEmoji}`;

            otherEmoji = textToEmoji(reactions.other)
            let otherElement= document.getElementById(`${messageID}-reactArea1`);
            otherElement.innerHTML = `${otherEmoji}`;
        }

        function textToEmoji(reaction) {
            if (reaction == "thumbsUp") {
                    return "👍" 
            }
            else if (reaction == "thumbsDown") {
                return "👎"
            }
            else if (reaction == "like") {
                    return "❤️"
            }
            else if (reaction == "laugh") {
                return "😂"
            }
            else if (reaction == "none") {
                return ""
            }
        }

        function emojiToText(reaction) {
            if (reaction == "👍") {
                    return "thumbsUp" 
            }
            else if (reaction == "👎") {
                return "thumbsDown"
            }
            else if (reaction == "❤️") {
                    return "like"
            }
            else if (reaction == "😂") {
                return "laugh"
            }
            else if (reaction == "") {
                return "none"
            }
        }

        function formatTime(time) {
            let seen = false;
            let idx = -1;
            for (let i = 0; i < time.length; i++) {
                if (time[i] == ':' && !seen)
                    seen = true;
                else if (time[i] == ':' && seen)
                    idx = i;
            }
            return time.slice(0, idx) + time.slice(idx + 3);
        }
        function addChatSentMessage(msg, time, id) {

            let msgType = "";

            if (msg.type == "txt") {
                msgType = `<p>${msg.body}</p>`
                
            }
            else if (msg.type == "img") {
                 msgType = `<img src="https://socialsimulation.s3.amazonaws.com/${msg.body}" style ="height: auto; width: 200px; border-radius:6px; "></img>`
            }
            else if (msg.type == "vid") {
                msgType = `<video width="200" style="border-radius:6px" controls><source src="https://socialsimulation.s3.amazonaws.com/${msg.body}" type="video/mp4"></video>`
            }
            // reaction box
            const react = `<div  class="reactbox" tabindex="-1" id="${id}-react" div style="width:50%; height:20%; border-radius:23px; background-color:white; border: 2px solid grey; position:absolute; 
                            top:-10px; right:23px; z-index:100; display:none; justify-content: space-between; align-items:center; padding-left:12px; padding-right:12px;">
                            <div id="${id}-thumbsup" style="cursor:pointer; user-select:none;">👍</div>
                            <div id="${id}-thumbsdown" style="cursor:pointer; user-select:none;">👎</div>
                            <div id="${id}-like" style="cursor:pointer; user-select:none;">❤️</div>
                            <div id="${id}-laugh" style="cursor:pointer; user-select:none;">😂</div>
                        </div>`

            const mes = ` <div class="row"  style="padding-top:6px; padding-bottom:6px">
                            <div class="right floated right aligned seven wide column">
                            ${react}
                            <div class="ui mini blue compact message" id="${id}">
                                ${msgType}
                                <div id="${id}-reactArea1" style="border-radius:24px; background-color:white; position:absolute; left:2px;"></div> 
                                    <div id="${id}-reactArea2" style="border-radius:24px; background-color:white; position:absolute; left:14px;"></div>
                            </div>
                            <p style="font-size:10px; margin-top:-8px">${formatTime(time)}</p>
                            </div>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            // on click actions for showing reaction box
            $(`#${id}`).on('click', function () {
                $(`#${id}-react`).css('display','flex').focus();
            });
            // when the user clicks outside of reaction box, stop displaying it
            $(`#${id}-react`).on('focusout', function () {
                $(`#${id}-react`).css('display','none');
            });

            // onclick actions for reactions
            document.getElementById(`${id}-thumbsup`).onclick=function(){sendReaction(msg, "self", "thumbsUp", id)};
            document.getElementById(`${id}-thumbsdown`).onclick=function(){sendReaction(msg, "self", "thumbsDown", id)};
            document.getElementById(`${id}-like`).onclick=function(){sendReaction(msg, "self", "like", id)};
            document.getElementById(`${id}-laugh`).onclick=function(){sendReaction(msg, "self", "laugh", id)};
        }

        function addChatReceivedMessage(msg, time, id, user, nudge, messageDeleted) {
            console.log('addChatRecievedMessage', msg)
            let msgType = "";
            if (msg.type == "txt") {
                msgType = `<p>${msg.body}</p>`
                if (messageDeleted || nudge.nudgeType == "sensitivityFilter" && (nudge.userAction == "deleteMessage" || nudge.userAction == "deleteMessageAndLetOthersKnow" )) {
                    msgType = `<p><b>hidden message</b></p>`
                }
            }
            else if (msg.type == "img") {
                 msgType = `<img src="https://socialsimulation.s3.amazonaws.com/${msg.body}" style ="height: auto; width: 200px; border-radius:6px; "></img>`
            }
            else if (msg.type == "vid") {
                msgType = `<video width="200" style="border-radius:6px"  controls><source src="https://socialsimulation.s3.amazonaws.com/${msg.body}" type="video/mp4"></video>`
            }

            // reaction box
            const react = `<div tabindex="-1"  class="reactbox" id="${id}-react" div style="width:50%; height:20%; border-radius:23px; background-color:white; border: 2px solid grey; position:absolute; 
                        top:-10px; left:23px; z-index:100; display:none; justify-content: space-between; align-items:center; padding-left:12px; padding-right:12px;">
                        <div id="${id}-thumbsup" style="cursor:pointer; user-select:none;">👍</div>
                        <div id="${id}-thumbsdown" style="cursor:pointer; user-select:none;">👎</div>
                        <div id="${id}-like" style="cursor:pointer; user-select:none;">❤️</div>
                        <div id="${id}-laugh" style="cursor:pointer; user-select:none;">😂</div>
                    </div>`

            const mes = ` <div class="row"  style="padding-top:6px; padding-bottom:6px">
                            <div class="right aligned one wide column" style="padding:0!important"><img class="ui avatar image chatPartnerMessagePFP-${user}" id="" src=""/></div>
                            <div class="seven wide column">
                                ${react}
                            <div class="ui mini compact message" id="${id}">
                                ${msgType}
                                <div id="${id}-reactArea1" style="border-radius:24px; background-color:white; position:absolute; right:2px;"></div> 
                                <div id="${id}-reactArea2" style="border-radius:24px; background-color:white; position:absolute; right:14px;"></div> 
                            </div>

                            <p style="font-size:10px; margin-top:-8px">${formatTime(time)}</p>
                            </div>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            const x = document.getElementsByClassName(`chatPartnerMessagePFP-${user}`);

            for(i=0; i<x.length; i++){
                x[i].src = document.getElementById(`chatPartnerPFP-${user}`).src;
            }
            
            // on click actions for showing reaction box
            $(`#${id}`).on('click', function () {
                $(`#${id}-react`).css('display','flex').focus();
            });

            // when the user clicks outside of reaction box, stop displaying it
            $(`#${id}-react`).on('focusout', function () {
                $(this).css('display','none');
            });

            // onclick actions for reactions
            //- document.getElementById(`${id}-thumbsup`).onclick=function(){readMessage(id, "test321", "bdskdbkjads")};

            document.getElementById(`${id}-thumbsup`).onclick=function(){sendReaction(msg, "other", "thumbsUp", id)};
            document.getElementById(`${id}-thumbsdown`).onclick=function(){sendReaction(msg, "other", "thumbsDown", id)};
            document.getElementById(`${id}-like`).onclick=function(){sendReaction(msg, "other", "like", id)};
            document.getElementById(`${id}-laugh`).onclick=function(){sendReaction(msg, "other", "laugh", id)};
        }

        
        function onClickNewDeleteButton(msg){
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);
            onClickDismissButton()
        }
        
        function onClickNewDeleteAndUpdateButton(msg){
            console.log('onClickDeleteAndLetOthersKnowButton')
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessageAndLetOthersKnow",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);

            onClickDismissButton()
        }
         

        /*
        function addNudgeType2(msg) {
            const nudge = `<div class="row" id="nudgeType2" style="padding-top:6px; padding-bottom:6px">
                            <div class="right aligned one wide column" style="padding:0!important"></div>
                            <div class="seven wide column">
                                <div class="ui cards">
                                    <div class="card" style="min-width:400px;  position: relative;">
                                        
                                        <div class="content" style="text-align:center">
                                            <div class="description"> The last message you received is censored due to potentially harmful content. <a style="color:blue" href="http://localhost:3000/risk_information"> 
                                                <u>Learn why this is harmful.</u>
                                            </a> Are you sure you want to view this message?</div>
                                        </div>
                                        <div class="extra content">
                                            <div class="ui three buttons">
                                                <div class="ui basic black button" id="showMeButton">View</div>
                                                <div class="ui basic black button" id="deleteMessageButton">Delete & Dismiss</div>
                                                <div class="ui basic black button" id="deleteMessageAndLetOthersKnowButton">Delete & Let Others Know</div>
                                                
                                            </div>
                                        </div>
                                        <div id="exitNudgeButton" style="position: absolute; top: 1px; right: 1px; padding: 1px; font-size: 16px; color: #ffffff; background-color: #888; border-radius: 50%; width: 20px; height: 20px; text-align: center; line-height: 20px; cursor: pointer;">x</div>
                                    </div>
                                </div>
                                <p style="font-size:10px; margin-top:-8px">${formatTime(msg.msg.time)}</p>
                            </div>
                        </div>`

            $('#messages').append(nudge);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            let element = document.getElementById("nudgeType2");
            element.id = msg._id + 'nudgeType2';

            element = document.getElementById("deleteMessageButton");
            element.id = msg._id + 'deleteMessageButton';

                    element = document.getElementById("showMeButton");
                    element.id = msg._id + 'showMeButton';
                    
                    element = document.getElementById("deleteMessageAndLetOthersKnowButton");
                    element.id = msg._id + 'deleteMessageAndLetOthersKnowButton';

                    document.getElementById(msg._id + 'deleteMessageButton').onclick=function(){onClickDeleteMessageButton(msg)};
                    document.getElementById(msg._id + 'showMeButton').onclick=function(){onClickShowMeButton(msg)};
                    document.getElementById(msg._id + 'deleteMessageAndLetOthersKnowButton').onclick=function(){onClickDeleteAndLetOthersKnowButton(msg)}
        }
        */

        function onClickDeleteAndLetOthersKnowButton(msg){
            console.log('onClickDeleteAndLetOthersKnowButton')
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessageAndLetOthersKnow",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);
        }

        function onClickDeleteMessageButton(msg) {
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);
        }

        function onClickBlockUserButton(msg) {
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "blockUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }


        function onClickShowMeButton(msg) {
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "showMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text(msg.msg.body);
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
        }

        
        socket.on("letOthersKnowLinkNudge", (harmfulContentString)=>{
            // TODO: CREATE MODAL TO SHOW THIS MESSAGE
            console.log(harmfulContentString + ' Learn more about why this is harmful.')
            $('#letOthersKnowAbout').modal('setting', 'closable', false).modal('show');
            // change the text to waringStr
            // const warningStr = harmfulContentString + ' Learn more about why this is harmful.'
            const warningStr = '#[strong Community Warning: ] It has been reported by a user that ' + harmfulContentString + ' sent a potenially harmful link to other users. Learn why this is harmful. ADD A LINK AND ICON'
            $('#letOthersKnowAboutContent').html(warningStr)
        })
        document.getElementById('dismissModalEveryoneButton').onclick=function(){onClickDismissButton()};
