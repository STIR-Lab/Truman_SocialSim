extends ui_layout

block content
    .computer.only.tablet.only.row
        .five.wide.column
            .ui.segment(style='height:90vh')
                .ui.basic.buttons.fluid(style="margin-bottom:12px") 
                    #recentButton.ui.button
                        h3.ui.header(style="margin-top:2px") 
                            i.clock.outline.icon(style="margin-right:-4px") 
                            |   Recent
                    #discoverButton.ui.button
                        h3.ui.header(style="margin-top:2px") 
                            i.globe.icon(style="margin-right:-4px") 
                            |   Discover
                
                #recentChatHistory(style="margin-top:4px") 
                    #chatHistory.ui.relaxed.divided.list
           
                #discoverProfiles.ui.grid.stackable

        .eleven.wide.column
            .ui.segment(style='height:90vh')
                h2#chatPartnerName.ui.left.floated.header
                button#newChatButton.positive.ui.button.right.floated(style="margin-bottom:10px") 
                    i.pencil.alternate.icon
                    |   New Chat
                .ui.clearing.divider
                p

                .messages.container(style="height: 70vh; overflow-x: hidden; overflow-y: auto;")
                    #messages.ui.grid(style="padding-top:10px")
               
                form#messageInput(action='')
                    .ui.fluid.icon.input(style='position: absolute; bottom: 10px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                        input#input(autocomplete="off" type='text' placeholder='Enter message')
                        button
                            i.paper.plane.icon

                #userIdTag(userId=user.id)
                #usernameTag(username=user.username)

    .ui.mini.modal
        .header
            .ui.center.aligned.container
                | New Message
        .content
            #userList.ui.relaxed.divided.list
        .actions
            button.positive.ui.button.right.floated(style="margin-bottom:10px") 
                | Next

                script(src='/socket.io/socket.io.js')
                script.
                    const userId = document.getElementById('userIdTag').getAttribute('userId');
                    const username = document.getElementById('usernameTag').getAttribute('username');

                    // hide input until user picks chat partner
                    $('#messageInput').hide();

                    document.getElementById('newChatButton').onclick=function(){onClickNewChat()};

                    function onClickNewChat() {
                        $('.ui.modal').modal('show');
                    }
                    
                    const URL = "http://localhost:3000";
                    const socket = io(URL, { autoConnect: false, transports: ['websocket'], upgrade: false });
                    
                    socket.onAny((event, ...args) => {
                        console.log(event, args);
                    });

                    const sessionId = localStorage.getItem("sessionId");
                    if (sessionId) {
                        socket.auth = { sessionId, username, userId};
                        socket.connect();
                    }
                    else {
                        socket.auth = { username, userId};
                        socket.connect();
                    }

                    socket.on("session", ({ sessionId, userId }) => {
                        // attach the session ID to the next reconnection attempts
                        socket.auth = { sessionId };
                        localStorage.setItem("sessionId", sessionId);
                        socket.userId = userId;
                    });

                    socket.on("connect_error", (err) => {
                        console.log(`connect_error due to ${err.message}`);
                    });

                    let copiedUserList = null;

                    socket.on("userList", (userList) => {
                        copiedUserList = JSON.parse(JSON.stringify(userList));
                        userList.forEach((user) => {
                            var u = `   <div class="item"><img class="ui avatar image" src="public/grey.jpg"/>
                                            <div class="content">
                                                <div class="header">${user.username}</div>
                                            </div>
                                            <button id="rightArrowButton" class="ui icon right floated mini button""><i class="right arrow icon"></i></button>
                                        </div>`

                            if (user.userId == userId) { // add user to top of user list
                                $('#userList').prepend(u);
                            }
                            else {
                                $('#userList').append(u);
                            }

                            // add onClick function to button
                            var element = document.getElementById("rightArrowButton");
                            element.id = user.userId + 'rightArrowButton';
                            document.getElementById(user.userId + 'rightArrowButton').onclick=function(){onClickUsername(user.userId)};

                            if (user.userId == userId) { // do not allow user to chat itself
                                document.getElementById(user.userId + 'rightArrowButton').remove();
                            }
                        });
                    });

                    $('#discoverProfiles').hide();

                    socket.on("receive-chat-history", (allConvo) => {
                         if (allConvo.length == 0) {
                            $('#recentButton').hide();
                            $('#recentChatHistory').hide();
                            $('#discoverProfiles').show();
                        }

                        let usersInHistory = [];
                        
                        allConvo.forEach((chatPartner) => {
                            let chatPartnerUsername = chatPartner.usernameA == username ? chatPartner.usernameB : chatPartner.usernameA;
                            let chatPartnerId = chatPartner.userIdA == userId ? chatPartner.userIdB : chatPartner.userIdA;
                            let lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;

                            usersInHistory.push(chatPartnerId);

                            var listItem = `<div class="item"><img class="ui avatar image" src="public/grey.jpg"/>
                                                <div class="content"><a class="header">${chatPartnerUsername}</a>
                                                    <div class="description">${lastMessage}</div>
                                                </div>
                                                <button id="rightChevronButton" class="ui icon right floated mini button"><i class="angle right icon"></i></button>
                                            </div>`;

                            $('#chatHistory').append(listItem);

                            var element = document.getElementById("rightChevronButton");
                            element.id = chatPartnerId + 'rightChevronButton';
                            document.getElementById(chatPartnerId + 'rightChevronButton').onclick=function(){onClickUsername(chatPartnerId)};
                        });

                        copiedUserList.forEach((user) => {
                            let count = 0;
                            let prevRow = count;
                            var row = `<div id="prevRow" class="row"></div>`;

                            $('#discoverProfiles').append(row);
                            var element = document.getElementById("prevRow");
                            element.id = 'row' + count;

                            if (user.userId != userId && !usersInHistory.includes(user.userId)) {
                                console.log(user);

                                count++;
                                if (count > 0 && count % 2 == 0) {
                                    $('#discoverProfiles').append(row);
                                    prevRow = count;
                                }

                                var profile = ` <div class="eight wide column">
                                                    <div class="ui card" style="margin-bottom:10px">
                                                        <div class="content">
                                                            <div class="center aligned column"><img class="ui circular tiny image" src="public/grey.jpg" style="margin-bottom:4px"/></div>
                                                            <div class="description" style="text-align: center; margin-bottom:4px;">@${user.username}</div>
                                                            <button id="profileButton" class="ui button tiny fluid fluid" style="margin-bottom:4px">Profile </button>
                                                            <button id="messageButton" class="ui positive button tiny fluid">Message </button>
                                                        </div>
                                                    </div>
                                                </div>`
                                
                                document.getElementById('row' + prevRow).insertAdjacentHTML('beforeend', profile);

                                var element = document.getElementById("profileButton");
                                element.id = user.userId + 'profileButton';
                                document.getElementById(user.userId + 'profileButton').onclick=function(){onClickProfile(user.userId)};

                                var element = document.getElementById("messageButton");
                                element.id = user.userId + 'messageButton';
                                document.getElementById(user.userId + 'messageButton').onclick=function(){onClickUsername(user.userId)};
                            }
                        });
                    });

                    function onClickProfile(userId) {
                        console.log(userId);
                        window.location.href = "/user/" + userId;
                    }

                    document.getElementById('recentButton').onclick=function(){onClickRecentButton()};
                    function onClickRecentButton() {
                        $('#recentButton').addClass('active');
                        $('#discoverButton').removeClass('active');
                        $('#discoverProfiles').hide();
                        $('#recentChatHistory').show();
                    }

                    document.getElementById('discoverButton').onclick=function(){onClickDiscoverButton()};
                    function onClickDiscoverButton() {
                         if (history) {
                            $('#discoverButton').addClass('active');
                            $('#recentButton').removeClass('active');
                            $('#discoverProfiles').show();
                            $('#recentChatHistory').hide();
                        }
                    }

                    let chatPartnerSocketId = null;
                    let chatPartnerUsername = null;
                    let chatPartnerUserId = null;

                    function onClickUsername(userId) {
                        // FIXME: searching in user list to see if this chat partner is online, since user list only sends current logged in user
                        copiedUserList.forEach((user) => {
                            if (user.userId == userId) {
                                chatPartnerSocketId = user.socketId;
                                chatPartnerUsername = user.username;
                                chatPartnerUserId = user.userId;
                            }
                        });
                        
                        $("#chatPartnerName").text(chatPartnerUsername);
                        $('#messages').empty();
                        $('#messageInput').show();
                        $('.ui.modal').modal('hide');

                        // FIXME: Since chatPartner can be null, backend won't be able to find the history
                        // after we get the chat partner info we want to get all messages
                        socket.emit('get-messages', {
                            to: {
                                    username: chatPartnerUsername,
                                    userId: chatPartnerUserId,
                                }
                        })
                    }

                    // TODO: Disable message input button if !chatParterUserId (meaning chatParterner is offline)
                    $('#messageInput')[0].addEventListener('submit', function(e) {
                        e.preventDefault();
                        var input = $('#input')[0]; 
                        if (input.value) {
                            let date = new Date()
                            addChatSentMessage(input.value, date.toLocaleTimeString("en-US"))
                            socket.emit('send-message', { 
                                msg: {
                                    type: "txt",
                                    body: input.value
                                },
                                to: {
                                    username: chatPartnerUsername,
                                    userId: chatPartnerUserId,
                                    socketId: chatPartnerSocketId
                                } 
                            });
                            input.value = '';
                        }
                    });

                    // get all messages
                    socket.on("message-list", (messageList) => {
                        for (let i = 0; i < messageList.length; i++) {
                            if (messageList[i].from.userId == userId) {
                                addChatSentMessage(messageList[i].msg.body, messageList[i].msg.time);
                            }
                            else if (messageList[i].to.userId == userId && messageList[i].from.userId == chatPartnerUserId) {
                                addChatReceivedMessage(messageList[i].msg.body, messageList[i].msg.time);
                            }
                        }
                    });
                    
                    socket.on("receive-message", (msg) => {
                        if (msg.from.userId == userId) {
                            addChatSentMessage(msg.msg.body, msg.msg.time);
                        }
                        else if (msg.to.userId == userId && msg.from.userId == chatPartnerUserId) {
                            addChatReceivedMessage(msg.msg.body, msg.msg.time);
                        }
                    });

                    function addChatSentMessage(msg, time) {
                        var mes = ` <div class="row" style="padding-top:6px; padding-bottom:6px">
                                        <div class="right floated right aligned seven wide column">
                                        <div class="ui mini blue compact message">
                                            <p>${msg}</p>
                                        </div>
                                        <p style="font-size:10px; margin-top:-8px">${time}</p>
                                        </div>
                                    </div>`
                        $('#messages').append(mes);
                        $('#messages').scrollTop($('#messages')[0].scrollHeight);
                    }

                    function addChatReceivedMessage(msg, time) {
                        var mes = ` <div class="row" style="padding-top:6px; padding-bottom:6px">
                                        <div class="right aligned one wide column" style="padding:0!important"><img class="ui avatar image" src="public/grey.jpg"/></div>
                                        <div class="seven wide column">
                                        <div class="ui mini compact message">
                                            <p>${msg}</p>
                                        </div>
                                        <p style="font-size:10px; margin-top:-8px">${time}</p>
                                        </div>
                                    </div>`
                        $('#messages').append(mes);
                        $('#messages').scrollTop($('#messages')[0].scrollHeight);
                    }   
                    
//- TODO: update code for mobile view 
    .mobile.only.row