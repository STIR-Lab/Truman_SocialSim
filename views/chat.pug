extends ui_layout

block content
    link(rel='stylesheet' href='https://www.w3schools.com/w3css/4/w3.css')
    .row
        .five.wide.column
            .ui.segment(style='height:90vh')
                .ui.basic.buttons.fluid(style="margin-bottom:12px") 
                    #recentButton.ui.button
                        h3.ui.header(style="margin-top:2px") 
                            i.clock.outline.icon(style="margin-right:-4px") 
                            |   Recent
                    #discoverButton.ui.button
                        h3.ui.header(style="margin-top:2px") 
                            i.globe.icon(style="margin-right:-4px") 
                            |   Discover
                
                #recentChatHistory(style="margin-top:4px") 
                    #chatHistory.ui.relaxed.divided.list
           
                #discoverProfiles.ui.grid.stackable
                    #discoverProfileNoUsersText.p(style="margin-top:20px") There are no new users online.

        .eleven.wide.column
            .ui.segment(style='height:90vh')
                h2#chatPartnerName.ui.left.floated.header
                button#newChatButton.positive.ui.button.right.floated(style="margin-bottom:10px") 
                    i.pencil.alternate.icon
                    |   New Chat
                .ui.clearing.divider

                .messages.container(style="height: 70vh; overflow: hidden; display:flex; flex-direction: column-reverse; position: relative")
                    #messages.ui.grid(style="padding:10px; position: absolute; top: 0; bottom: 0; left: 0; right: -17px; overflow-y: scroll;")

                #nudge3Card.ui.card(style='position: absolute; bottom: -60px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                    .content
                        #closeNudge3.button.ui.circular.basic.icon.mini.right.floated.button
                            i.close.icon
                        p Risky message detected, here are some ways you can respond
                    .ui.vertical.buttons
                        #nudge3Button1.button.fluid.ui.button(style="margin-bottom:4px") I don't feel comfortable sharing that info
                        #nudge3Button2.button.fluid.ui.button(style="margin-bottom:4px") Sorry, I don't know you
                        #nudge3Button3.button.fluid.ui.button(style="margin-bottom:4px") I don't think it's appropriate to ask that
                        #nudge3Button4.button.fluid.ui.button(style='background-color: rgba(255,0,0,0.3)') Block and Report
                                
                form#messageInput(action='')
                    .ui.fluid.icon.input(style='position: absolute; bottom: 10px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                        img#outputImage(src="#" style="width: 60px; height:auto; position: absolute; bottom: 70px; left: 50%; display: none;")
                        #sending(src="#" style="position: absolute; bottom: 50px; left: 50%; display: none;")
                            code
                                | sending...
                        input#input(autocomplete="off" type='text' placeholder='Enter message')
                        button#submitMessage(type="submit")
                            i.paper.plane.icon 
                        button(type="button" style='position: relative; right: 2px;')     
                            label.custom-file-upload(for='fileupload' )
                                i.camera.icon
                        input#fileupload(type='file' style="display: none;" name="fileupload" accept="image/*,video/mp4,video/x-m4v,video/*")
                        button#uploadImage(type="button" style='position: relative; right: 2px; display: none;')     

                #userIdTag(userId=user.id)
                #usernameTag(username=user.username)
                #userProfilePicture(userpfp = user.profile.picture ? user.profile.picture : "https://trumanprofilepictures.s3.amazonaws.com/default-pfp.png")
 
    #newChatModal.ui.mini.modal
        .header
            .ui.center.aligned.container
                | New Message
        .content
            #userList.ui.relaxed.divided.list

    #nudge1Modal.ui.mini.modal
        .content
            .ui.center.aligned.container
                | This user is asking for sensitive information. We strongly recommend you not give out personal information to strangers.
        .actions
            #dismissModal1Button.button.ui.button
                | Dismiss

    #nudge2Modal.ui.mini.modal
        .content
            .ui.center.aligned.container
                | We detected that this user just sent you explicit content. We recommend you exercise care with the user
        .actions
            #dismissModal2Button.button.ui.button
                | Dismiss

    script(src='/socket.io/socket.io.js')
    script.
        const userId = document.getElementById('userIdTag').getAttribute('userId');
        const username = document.getElementById('usernameTag').getAttribute('username');
        const userpfp = document.getElementById('userProfilePicture').getAttribute('userpfp');
        
        // hide input until user picks chat partner
        $('#messageInput').hide();
        $('#nudge3Card').hide();

        document.getElementById('newChatButton').onclick=function(){onClickNewChat()};
        document.getElementById('fileupload').onchange=function(){loadFile(event)};

        function onClickNewChat() {
            $('#newChatModal').modal('show');
        }
        
        const URL = "http://localhost:3000";
        const socket = io(URL, { autoConnect: false, transports: ['websocket'], upgrade: false });
        
        socket.onAny((event, ...args) => {
            console.log(event, args);
        });

        const sessionId = localStorage.getItem("sessionId");
        if (sessionId) {
            socket.auth = { sessionId, username, userId, userpfp};
            socket.connect();
        }
        else {
            socket.auth = { username, userId, userpfp};
            socket.connect();
        }

        socket.on("session", ({ sessionId, userId }) => {
            // attach the session ID to the next reconnection attempts
            socket.auth = { sessionId };
            localStorage.setItem("sessionId", sessionId);
            socket.userId = userId;
        });

        socket.on("connect_error", (err) => {
            console.log(`connect_error due to ${err.message}`);
        });

        let copiedUserList = null;

        let usersInUserList = [];

        let loadedHistory = false;

        let usersInDiscover = [];
        let usersInRecent = [];

        socket.on("userList", (userList) => {
            copiedUserList = JSON.parse(JSON.stringify(userList));

            userList.forEach((user) => {
                if (!usersInUserList.includes(user.userId)) {
                    usersInUserList.push(user.userId);

                    const u = ` <div class="item">
                                    <div class="content">
                                        <div class="header">${user.username}</div>
                                    </div>
                                    <button id="rightArrowButton" class="ui icon right floated mini button" style="margin-top:-20px"><i class="right arrow icon"></i></button>
                                </div>`

                    if (user.userId == userId) { // add user to top of user list
                        $('#userList').prepend(u);
                    }
                    else {
                        $('#userList').append(u);
                    }

                    // add onClick function to button
                    let element = document.getElementById("rightArrowButton");
                    element.id = user.userId + 'rightArrowButton';
                    document.getElementById(user.userId + 'rightArrowButton').onclick=function(){onClickUsername(user.userId)};

                    if (user.userId == userId) { // do not allow user to chat itself
                        document.getElementById(user.userId + 'rightArrowButton').remove();
                    }

                    if (loadedHistory) {
                        addUserInDiscover(user);
                    }
                }
            });
        });

        $('#discoverProfiles').hide();
        let usersInHistory = [];

        let numUnread = 0;

        async function addUserInHistory(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType) {
            let lastmsg = lastMessage;
            if (msgType == "img" || msgType == "vid") {
                lastmsg = "Sent media"
            }

            if (usersInRecent.includes(chatPartnerId)) {
                return;
            }
            usersInRecent.push(chatPartnerId);
                
            const listItem = `<div class="item">
                                <span id="redBubble" class="w3-badge w3-red" style="z-index:10; position: absolute"></span>
                                <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                <div class="content">
                                    <a class="header" href="http://localhost:3000/user/${chatPartnerId}">${chatPartnerUsername}</a>
                                    <div class="description" style="max-width: 180px" id="lastMessage">${lastmsg}</div>
                                </div>
                                <button id="rightChevronButton" class="ui icon right floated mini button"><i class="angle right icon"></i></button>
                            </div>`;

            $('#chatHistory').append(listItem);

            await socket.emit("find-partner",{userId: chatPartnerId})
            await socket.on("partner-pfp",({pfp , userId})=>{
                if (pfp != null && userId == chatPartnerId) {
                    let pic = `https://trumanprofilepictures.s3.amazonaws.com/${pfp}`;
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = pic;
                }
                else if (userId == chatPartnerId) {
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = "https://trumanprofilepictures.s3.amazonaws.com/default-pfp.png";
                }
            })

            let element = document.getElementById("lastMessage");
            element.id = chatPartnerId + 'lastMessage';

            element = document.getElementById("redBubble");
            element.id = chatPartnerId + 'redBubble';
            $('#' + chatPartnerId + 'redBubble').hide();
            $('#' + chatPartnerId + 'redBubble').text(0);

            element = document.getElementById("rightChevronButton");
            element.id = chatPartnerId + 'rightChevronButton';
            document.getElementById(chatPartnerId + 'rightChevronButton').onclick=function(){onClickUsername(chatPartnerId)};

            $('#' + chatPartnerId + 'redBubble').text(numUnread);
            if (numUnread > 0) {
                $('#' + chatPartnerId + 'redBubble').show();
            }
        }

        let blocked = [];
        let isBlocked = [];

        socket.on("receive-chat-history", (allConvo) => {
            if (allConvo.length == 0) {
                $('#recentButton').hide();
                $('#recentChatHistory').hide();
                $('#discoverProfiles').show();
            }

            usersInHistory = [];

            loadedHistory = true;

            allConvo.forEach((chatPartner) => {
                let chatPartnerUsername = chatPartner.usernameA == username ? chatPartner.usernameB : chatPartner.usernameA;
                let chatPartnerId = chatPartner.userIdA == userId ? chatPartner.userIdB : chatPartner.userIdA;
                let lastMessage = ""
                let msgType = chatPartner.content[chatPartner.content.length - 1].msg.type
           
                if (chatPartner.blocked == chatPartnerId) {
                    blocked.push(chatPartnerId);
                }
                
                if (chatPartner.blocked == userId) {
                    isBlocked.push(chatPartnerId);
                }

                if (chatPartner.content[chatPartner.content.length - 1].msg.type == "txt")
                    if (chatPartner.content[chatPartner.content.length - 1].from.userId == userId) { // chat sent
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    }
                    else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "deleteMessage") {
                        lastMessage = "Deleted message"
                    }
                    else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "") {
                        lastMessage = "Unread message"
                    }
                    else {
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    }
                else {
                    lastMessage = "Sent media"
                }
                
                usersInHistory.push({userId: chatPartnerId, username: chatPartnerUsername, userpfp: chatPartnerPFP});

                numUnread = chatPartner.content.filter(c => c.from.userId == chatPartnerId).filter(c => !c.msg.read).length

                addUserInHistory(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType);
            });

            copiedUserList.forEach((user) => {
                addUserInDiscover(user);
            });
        });

        function addUserInDiscover(user) {
            let count = 0;
            let prevRow = count;
            const row = `<div id="prevRow" class="row"></div>`;

            $('#discoverProfiles').append(row);
            let element = document.getElementById("prevRow");
            element.id = 'row' + count;

            if (user.userId != userId && !usersInHistory.filter(element => element.userId == user.userId).length && !usersInDiscover.includes(user.userId)) {
                usersInDiscover.push(user.userId);
                count++;
                if (count > 0 && count % 2 == 0) {
                    $('#discoverProfiles').append(row);
                    prevRow = count;
                }

                const userpfpsrc = user.userpfp ? "https://trumanprofilepictures.s3.amazonaws.com/" + user.userpfp : "https://trumanprofilepictures.s3.amazonaws.com/default-pfp.png"; 

                const profile = ` <div class="eight wide column">
                                    <div class="ui card" style="margin-bottom:10px">
                                        <div class="content">
                                            <div class="center aligned column"><img class="ui circular tiny image" src=${userpfpsrc} style="margin-bottom:4px; object-fit:cover; width:75px; height:75px"/></div>
                                            <div class="description" style="text-align: center; margin-bottom:4px;">@${user.username}</div>
                                            <button id="profileButton" class="ui button tiny fluid fluid" style="margin-bottom:4px">Profile </button>
                                            <button id="messageButton" class="ui positive button tiny fluid">Message </button>
                                        </div>
                                    </div>
                                </div>`
                
                document.getElementById('row' + prevRow).insertAdjacentHTML('beforeend', profile);

                let element = document.getElementById("profileButton");
                element.id = user.userId + 'profileButton';
                document.getElementById(user.userId + 'profileButton').onclick=function(){onClickProfile(user.userId)};

                element = document.getElementById("messageButton");
                element.id = user.userId + 'messageButton';
                document.getElementById(user.userId + 'messageButton').onclick=function(){onClickUsername(user.userId)};

                $('#discoverProfileNoUsersText').hide();
            }
        }

        function onClickProfile(userId) {
            window.location.href = "/user/" + userId;
        }

        document.getElementById('recentButton').onclick=function(){onClickRecentButton()};
        function onClickRecentButton() {
            $('#recentButton').addClass('active');
            $('#discoverButton').removeClass('active');
            $('#discoverProfiles').hide();
            $('#recentChatHistory').show();
        }

        document.getElementById('discoverButton').onclick=function(){onClickDiscoverButton()};
        function onClickDiscoverButton() {
            if (history) {
                $('#discoverButton').addClass('active');
                $('#recentButton').removeClass('active');
                $('#discoverProfiles').show();
                $('#recentChatHistory').hide();
            }
        }

        let chatPartnerSocketId = null;
        let chatPartnerUsername = null;
        let chatPartnerUserId = null;
        let chatPartnerPFP = "https://trumanprofilepictures.s3.amazonaws.com/default-pfp.png";

        function onClickUsername(userId) {
            $('#' + userId + 'redBubble').hide();
            $('#' + userId + 'redBubble').text(0);
            
            // find user in online list
            copiedUserList.forEach((user) => {
                if (user.userId == userId) {
                    chatPartnerSocketId = user.socketId;
                    chatPartnerUsername = user.username;
                    chatPartnerUserId = user.userId;
                }
            });

            // find user in chat history
            usersInHistory.forEach((user) => {
                if (user.userId == userId) {
                    chatPartnerUsername = user.username;
                    chatPartnerUserId = user.userId;
                }
            });

            socket.emit("find-partner",{userId: chatPartnerUserId})

            socket.on("partner-pfp",({ pfp, userId})=>{
                if (pfp != null && userId == chatPartnerUserId) {
                    chatPartnerPFP = `https://trumanprofilepictures.s3.amazonaws.com/${pfp}`;
                }
            })
            
            $("#chatPartnerName").text(chatPartnerUsername);
            $('#messages').empty();
            $('#messageInput').show();
            $('#newChatModal').modal('hide');

            // after we get the chat partner info we want to get all messages
            socket.emit('get-messages', {
                to: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                    }
            })
        }

        // researcher set variable to show nudges
        let nudgeShown = true;

        let nudge3MessageId = null;

        document.getElementById('nudge3Button1').onclick=function(){onClickNudge3Button1()};
        function onClickNudge3Button1() {
            $('#nudge3Card').hide();
            sendMessage("I don't feel comfortable sharing that info");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        document.getElementById('nudge3Button2').onclick=function(){onClickNudge3Button2()};
        function onClickNudge3Button2() {
            $('#nudge3Card').hide();
            sendMessage("Sorry, I don't know you");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        document.getElementById('nudge3Button3').onclick=function(){onClickNudge3Button3()};
        function onClickNudge3Button3() {
            $('#nudge3Card').hide();
            sendMessage("I don't think it's appropriate to ask that");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }
        document.getElementById('nudge3Button4').onclick=function(){onClickNudge3Button4()};
        function onClickNudge3Button4() {
            $('#nudge3Card').hide();
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "blockUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        socket.on("blocked", (msg) => { // this user blocked
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has blocked you</b></p>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            $('#messageInput').hide();
        });

        socket.on("block-success", (msg) => { // blocked chat partner
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has been blocked and reported</b></p>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            $('#messageInput').hide();
        });

        function sendMessage(msg) {
            socket.emit('send-message', { 
                msg: {
                    type: "txt",
                    body: msg
                },
                nudge: {
                    nudgeShown: nudgeShown,
                    riskyScenario: null,
                    nudgeType: null,
                    userAction: null,
                },
                to: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                    socketId: chatPartnerSocketId
                } 
            });
        }

        const infoBreach1 = "Ahhh okay, which school you go to?";
        const infoBreach2 = "http://www.hahpics.xyz/4034-349i/";
        const infoBreach3 = "oh no way? Same. We should hang out sometime! What neighborhood do you live in?";

        const explicitContent1 = "explicitContent1.png";

        $('#messageInput')[0].addEventListener('submit', function(e) {
            e.preventDefault();
            const input = $('#input')[0]; 
            let riskyScenario = null;
            let nudgeType = null;
            if (input.value) {
                if (input.value == infoBreach1) {
                    riskyScenario = "infoBreach1"
                    nudgeType = "abstinence";
                }
                else if (input.value == infoBreach2) {
                    riskyScenario = "infoBreach2"
                    nudgeType = "sensitivityFilter";
                }
                else if (input.value == infoBreach3) {
                    riskyScenario = "infoBreach3"
                    nudgeType = "guidedActions";
                }

                $('#nudge3Card').hide();

                socket.emit('send-message', { 
                    msg: {
                        type: "txt",
                        body: input.value
                    },
                    nudge: {
                        nudgeShown: nudgeShown,
                        riskyScenario: riskyScenario,
                        nudgeType: nudgeType,
                        userAction: null,
                    },
                    to: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                        socketId: chatPartnerSocketId
                    } 
                });
                input.value = '';
            }

            let file = uploadImage();
            
            if (file) {
                if (file.type.includes("image")) {
                    if (file.name == explicitContent1) {
                        riskyScenario = "explicitContent1"
                        nudgeType = "abstinence";
                    }
                    socket.emit('send-message', { 
                        msg: {
                            type: "img",
                            body: {path: file, filename: file.name}
                        },
                        nudge: {
                            nudgeShown: nudgeShown,
                            riskyScenario: riskyScenario,
                            nudgeType: nudgeType,
                            userAction: null,
                        },
                        to: {
                            username: chatPartnerUsername,
                            userId: chatPartnerUserId,
                            socketId: chatPartnerSocketId
                        } 
                    });
                    document.getElementById("sending").style.display = "block"
                }
                else if (file.type.includes("video")) {
                    socket.emit('send-message', { 
                        msg: {
                            type: "vid",
                            body: {path: file, filename: file.name}
                        },
                        to: {
                            username: chatPartnerUsername,
                            userId: chatPartnerUserId,
                            socketId: chatPartnerSocketId
                        } 
                    });
                    document.getElementById("sending").style.display = "block"
                }
            }
        });

        // upload image
        function uploadImage () {
            let pictureFile;
            
            if (fileupload.files[0]) {

                if (fileupload.files[0].size >= 10000000) {
                    return null;
                }
                    pictureFile = fileupload.files[0]
                    document.getElementById('fileupload').value = "";
                    return pictureFile;
            }
            return null;
        }

        async function loadFile(event) {
            const image = document.getElementById('outputImage');
            const reader = new FileReader();
 
            if (fileupload.files[0]) {

                if (fileupload.files[0].size >= 10000000) {
                    alert("Image Size too large!")
                    fileupload.files[0] = null;
                    return;
                }

                if (fileupload.files[0].type.includes("image")) {
                    reader.readAsDataURL(fileupload.files[0])
                    reader.onload = function(e) {
                        const result = reader.result;
                        image.src = result;  
                        image.style.display = "block";
                    };

                }

                if (fileupload.files[0].type.includes("video")) {
                    reader.readAsDataURL(fileupload.files[0])
                    reader.onload = function(e) {
                        const result = reader.result;
                        image.src = "https://cdn.iconscout.com/icon/free/png-256/video-file-85-1120664.png";  
                        image.style.display = "block"
                    };
                }
            }
        }

        // get all messages
        socket.on("message-list", (messageList) => {
            let messageIds = [];
            for (let i = 0; i < messageList.length; i++) {
                if (messageList[i].from.userId == userId) {
                    addChatSentMessage(messageList[i].msg, messageList[i].msg.time, messageList[i]._id );
                    loadReactions(messageList[i].msg.reactions, messageList[i]._id)
                }
                else  {
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach1) {
                        $('#nudge1Modal').modal('show');
                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].nudge.riskyScenario == "explicitContent1") {
                        $('#nudge2Modal').modal('show');
                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach3) {
                        $('#nudge3Card').show();
                        nudge3MessageId = messageList[i]._id;
                    }
                    if (nudgeShown && messageList[i].nudge.nudgeType == "sensitivityFilter" && messageList[i].nudge.userAction == "") {
                        addNudgeType2(messageList[i]);
                    }
                    else {
                        addChatReceivedMessage(messageList[i].msg, messageList[i].msg.time, messageList[i]._id, messageList[i].from.userId, messageList[i].nudge, false);
                        loadReactions(messageList[i].msg.reactions, messageList[i]._id)
                    }
                }
                if (messageList[i].to.userId == userId && !messageList[i].msg.read) {
                    messageIds.push(messageList[i]._id);
                }
            }
            socket.emit("read-messages", {
                messageIds: messageIds,
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });

            if (blocked.includes(chatPartnerUserId)) {
                const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has been blocked and reported</b></p>
                        </div>`
                $('#messages').append(mes);
                $('#messages').scrollTop($('#messages')[0].scrollHeight);
                $('#messageInput').hide();
            }

            if (isBlocked.includes(chatPartnerUserId)) {
                const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                            <p><b>${chatPartnerUsername} has blocked you</b></p>
                        </div>`
                $('#messages').append(mes);
                $('#messages').scrollTop($('#messages')[0].scrollHeight);
                $('#messageInput').hide();
            }
        });

        document.getElementById('dismissModal1Button').onclick=function(){onClickDismissButton()};
        function onClickDismissButton() {
            $('#nudge1Modal').modal('hide');
            $('#nudge2Modal').modal('hide');
        }

        document.getElementById('dismissModal2Button').onclick=function(){onClickDismissButton()};

        document.getElementById('closeNudge3').onclick=function(){onClickCloseNudge3Button()};
        function onClickCloseNudge3Button() {
            $('#nudge3Card').hide();
        } 
        
        socket.on("receive-message", (msg) => {
            // update latest message in recent chat history
            partnerId = msg.from.userId == userId ? msg.to.userId : msg.from.userId;

            if (msg.from.userId == userId) {
                if (msg.msg.type == "img" || msg.msg.type == "vid") {
                    $('#' + partnerId + 'lastMessage').text("Sent media");
                }
                else {
                    $('#' + partnerId + 'lastMessage').text(msg.msg.body);
                }
            }
            else if (msg.msg.type == "txt" && msg.nudge.nudgeType == "sensitivityFilter" && msg.nudge.userAction == "") {
                $('#' + partnerId + 'lastMessage').text("Unread message");
            }
            else if (msg.msg.type == "txt") {
                $('#' + partnerId + 'lastMessage').text(msg.msg.body);
            }
            else {
                $('#' + partnerId + 'lastMessage').text("Sent media");
            }

            partnerUsername = msg.from.username == username ? msg.to.username : msg.from.username;
            partnerPFP = msg.from.username == username ? msg.to.userpfp : msg.from.userpfp;

            const userInDiscover = !usersInHistory.some(user => {
                if (user.userId == partnerId) {
                    return true;
                }
            });

            if (userInDiscover) {
                if (msg.to.userId == userId) {
                    addUserInHistory(partnerUsername, msg.msg.body, partnerId, 1, msg.msg.type);
                }
                else {
                    addUserInHistory(partnerUsername, msg.msg.body, partnerId, 0, msg.msg.type);
                }
                
                $('#recentButton').show();
                onClickRecentButton();

                usersInHistory.push({userId: partnerId, username: partnerUsername});
            }
            if (msg.from.userId == userId) {
                addChatSentMessage(msg.msg, msg.msg.time, msg._id);
            }
            else if (msg.to.userId == userId && msg.from.userId == chatPartnerUserId) {
                if (nudgeShown && msg.msg.body == infoBreach1) {
                    $('#nudge1Modal').modal('show');
                }
                if (nudgeShown && msg.nudge.riskyScenario == "explicitContent1") {
                    $('#nudge2Modal').modal('show');
                }
                if (nudgeShown && msg.msg.body == infoBreach3) {
                    $('#nudge3Card').show();
                    nudge3MessageId = msg._id;
                }
                if (nudgeShown && msg.msg.body == infoBreach2) {
                    addNudgeType2(msg);
                }
                else {
                    addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
                }
                socket.emit("read-messages", {
                    messageIds: [msg._id],
                    other: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                    }
                });
            }
            else if (msg.to.userId == userId) {
                console.log("updating", Number($('#' + msg.from.userId + 'redBubble').text()) + 1);
                $('#' + msg.from.userId + 'redBubble').text(Number($('#' + msg.from.userId + 'redBubble').text()) + 1);
                $('#' + msg.from.userId + 'redBubble').show();
            }

            document.getElementById("outputImage").style.display = "none"
            document.getElementById("sending").style.display = "none"
            document.getElementById("outputImage").src = "#"
        });
        
        function sendReaction(msg, person, reactionType, messageID) {
            let currentReaction;

            // get current reaction of message
            if ( person == "self") {
                currentReaction = document.getElementById(`${messageID}-reactArea2`).innerHTML;
            }
            else {
                currentReaction = document.getElementById(`${messageID}-reactArea1`).innerHTML;
            }

            rct = emojiToText(currentReaction)

            if (rct == reactionType) { // if new reaction equal current reaction
                reactionType = "none"   //change to none
            }

            socket.emit('send-reaction', {
                messageID: messageID,
                person: person,
                reactionType: reactionType,
                reactions: msg.reactions,
                to: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                        socketId: chatPartnerSocketId
                } 
            });
            document.getElementById(`${messageID}-react`).style.display = "none"
        }

        socket.on('receive-reaction',({reactions, messageID, reactionType, person}) => {
            let emoji = "none";
            emoji = textToEmoji(reactionType) 

            if (person == "self") {
                let selfElement = document.getElementById(`${messageID}-reactArea2`);
                selfElement.innerHTML = `${emoji}`;
            } else {
                let otherElement= document.getElementById(`${messageID}-reactArea1`);
                otherElement.innerHTML = `${emoji}`;
            }
        })

        // triggered when the user gets all messages
        function loadReactions(reactions, messageID) {
            let selfEmoji = "none";
            let otherEmoji = "none";

            selfEmoji = textToEmoji(reactions.self)
            let selfElement = document.getElementById(`${messageID}-reactArea2`);
            selfElement.innerHTML = `${selfEmoji}`;

            otherEmoji = textToEmoji(reactions.other)
            let otherElement= document.getElementById(`${messageID}-reactArea1`);
            otherElement.innerHTML = `${otherEmoji}`;
        }

        function textToEmoji(reaction) {
            if (reaction == "thumbsUp") {
                    return "👍" 
            }
            else if (reaction == "thumbsDown") {
                return "👎"
            }
            else if (reaction == "like") {
                    return "❤️"
            }
            else if (reaction == "laugh") {
                return "😂"
            }
            else if (reaction == "none") {
                return ""
            }
        }

        function emojiToText(reaction) {
            if (reaction == "👍") {
                    return "thumbsUp" 
            }
            else if (reaction == "👎") {
                return "thumbsDown"
            }
            else if (reaction == "❤️") {
                    return "like"
            }
            else if (reaction == "😂") {
                return "laugh"
            }
            else if (reaction == "") {
                return "none"
            }
        }

        function formatTime(time) {
            let seen = false;
            let idx = -1;
            for (let i = 0; i < time.length; i++) {
                if (time[i] == ':' && !seen)
                    seen = true;
                else if (time[i] == ':' && seen)
                    idx = i;
            }
            return time.slice(0, idx) + time.slice(idx + 3);
        }
        function addChatSentMessage(msg, time, id) {

            let msgType = "";

            if (msg.type == "txt") {
                msgType = `<p>${msg.body}</p>`
                
            }
            else if (msg.type == "img") {
                 msgType = `<img src="https://trumanprofilepictures.s3.amazonaws.com/${msg.body}" style ="height: auto; width: 200px; border-radius:6px; "></img>`
            }
            else if (msg.type == "vid") {
                msgType = `<video width="200" style="border-radius:6px" controls><source src="https://trumanprofilepictures.s3.amazonaws.com/${msg.body}" type="video/mp4"></video>`
            }
            // reaction box
            const react = `<div  class="reactbox" tabindex="-1" id="${id}-react" div style="width:50%; height:20%; border-radius:23px; background-color:white; border: 2px solid grey; position:absolute; 
                            top:-10px; right:23px; z-index:100; display:none; justify-content: space-between; align-items:center; padding-left:12px; padding-right:12px;">
                            <div id="${id}-thumbsup" style="cursor:pointer; user-select:none;">👍</div>
                            <div id="${id}-thumbsdown" style="cursor:pointer; user-select:none;">👎</div>
                            <div id="${id}-like" style="cursor:pointer; user-select:none;">❤️</div>
                            <div id="${id}-laugh" style="cursor:pointer; user-select:none;">😂</div>
                        </div>`

            const mes = ` <div class="row"  style="padding-top:6px; padding-bottom:6px">
                            <div class="right floated right aligned seven wide column">
                            ${react}
                            <div class="ui mini blue compact message" id="${id}">
                                ${msgType}
                                <div id="${id}-reactArea1" style="border-radius:24px; background-color:white; position:absolute; left:2px;"></div> 
                                    <div id="${id}-reactArea2" style="border-radius:24px; background-color:white; position:absolute; left:14px;"></div>
                            </div>
                            <p style="font-size:10px; margin-top:-8px">${formatTime(time)}</p>
                            </div>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            // on click actions for showing reaction box
            $(`#${id}`).on('click', function () {
                $(`#${id}-react`).css('display','flex').focus();
            });
            // when the user clicks outside of reaction box, stop displaying it
            $(`#${id}-react`).on('focusout', function () {
                $(`#${id}-react`).css('display','none');
            });

            // onclick actions for reactions
            document.getElementById(`${id}-thumbsup`).onclick=function(){sendReaction(msg, "self", "thumbsUp", id)};
            document.getElementById(`${id}-thumbsdown`).onclick=function(){sendReaction(msg, "self", "thumbsDown", id)};
            document.getElementById(`${id}-like`).onclick=function(){sendReaction(msg, "self", "like", id)};
            document.getElementById(`${id}-laugh`).onclick=function(){sendReaction(msg, "self", "laugh", id)};
        }

        function addChatReceivedMessage(msg, time, id, user, nudge, messageDeleted) {
            let msgType = "";

            if (msg.type == "txt") {
                msgType = `<p>${msg.body}</p>`
                if (messageDeleted || nudge.nudgeType == "sensitivityFilter" && nudge.userAction == "deleteMessage") {
                    msgType = `<p><b>deleted message</b></p>`
                }
            }
            else if (msg.type == "img") {
                 msgType = `<img src="https://trumanprofilepictures.s3.amazonaws.com/${msg.body}" style ="height: auto; width: 200px; border-radius:6px; "></img>`
            }
            else if (msg.type == "vid") {
                msgType = `<video width="200" style="border-radius:6px"  controls><source src="https://trumanprofilepictures.s3.amazonaws.com/${msg.body}" type="video/mp4"></video>`
            }

            // reaction box
            const react = `<div tabindex="-1"  class="reactbox" id="${id}-react" div style="width:50%; height:20%; border-radius:23px; background-color:white; border: 2px solid grey; position:absolute; 
                        top:-10px; left:23px; z-index:100; display:none; justify-content: space-between; align-items:center; padding-left:12px; padding-right:12px;">
                        <div id="${id}-thumbsup" style="cursor:pointer; user-select:none;">👍</div>
                        <div id="${id}-thumbsdown" style="cursor:pointer; user-select:none;">👎</div>
                        <div id="${id}-like" style="cursor:pointer; user-select:none;">❤️</div>
                        <div id="${id}-laugh" style="cursor:pointer; user-select:none;">😂</div>
                    </div>`

            const mes = ` <div class="row"  style="padding-top:6px; padding-bottom:6px">
                            <div class="right aligned one wide column" style="padding:0!important"><img class="ui avatar image chatPartnerMessagePFP-${user}" id="" src=""/></div>
                            <div class="seven wide column">
                                ${react}
                            <div class="ui mini compact message" id="${id}">
                                ${msgType}
                                <div id="${id}-reactArea1" style="border-radius:24px; background-color:white; position:absolute; right:2px;"></div> 
                                <div id="${id}-reactArea2" style="border-radius:24px; background-color:white; position:absolute; right:14px;"></div> 
                            </div>

                            <p style="font-size:10px; margin-top:-8px">${formatTime(time)}</p>
                            </div>
                        </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            const x = document.getElementsByClassName(`chatPartnerMessagePFP-${user}`);

            for(i=0; i<x.length; i++){
                x[i].src = document.getElementById(`chatPartnerPFP-${user}`).src;
            }
            
            // on click actions for showing reaction box
            $(`#${id}`).on('click', function () {
                $(`#${id}-react`).css('display','flex').focus();
            });

            // when the user clicks outside of reaction box, stop displaying it
            $(`#${id}-react`).on('focusout', function () {
                $(this).css('display','none');
            });

            // onclick actions for reactions
            //- document.getElementById(`${id}-thumbsup`).onclick=function(){readMessage(id, "test321", "bdskdbkjads")};

            document.getElementById(`${id}-thumbsup`).onclick=function(){sendReaction(msg, "other", "thumbsUp", id)};
            document.getElementById(`${id}-thumbsdown`).onclick=function(){sendReaction(msg, "other", "thumbsDown", id)};
            document.getElementById(`${id}-like`).onclick=function(){sendReaction(msg, "other", "like", id)};
            document.getElementById(`${id}-laugh`).onclick=function(){sendReaction(msg, "other", "laugh", id)};
        }

        function addNudgeType2(msg) {
            const nudge = `<div class="row" id="nudgeType2" style="padding-top:6px; padding-bottom:6px">
                            <div class="right aligned one wide column" style="padding:0!important"></div>
                            <div class="seven wide column">
                                <div class="ui cards">
                                    <div class="card" style="min-width:400px;  position: relative;">
                                        
                                        <div class="content" style="text-align:center">
                                            <div class="description">The last message you received is censored due to potentially harmful content.</div>
                                            <a style="color:blue" href="http://localhost:3000/risk_information"> 
                                                <u>click here to learn more</u>
                                            </a>
                                            <div class="description">Are you sure you want to view this message?</div>
                                        </div>
                                        <div class="extra content">
                                            <div class="ui three buttons">
                                                <div class="ui basic black button" id="showMeButton">View</div>
                                                <div class="ui basic black button" id="deleteMessageButton">Delete</div>
                                                <div class="ui basic black button" id="blockUserButton">Block User</div>
                                            </div>
                                        </div>
                                        <div id="exitNudgeButton" style="position: absolute; top: 1px; right: 1px; padding: 1px; font-size: 16px; color: #ffffff; background-color: #888; border-radius: 50%; width: 20px; height: 20px; text-align: center; line-height: 20px; cursor: pointer;">x</div>
                                    </div>
                                </div>
                                <p style="font-size:10px; margin-top:-8px">${formatTime(msg.msg.time)}</p>
                            </div>
                        </div>`

            $('#messages').append(nudge);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            let element = document.getElementById("nudgeType2");
            element.id = msg._id + 'nudgeType2';

            element = document.getElementById("deleteMessageButton");
            element.id = msg._id + 'deleteMessageButton';

            element = document.getElementById("showMeButton");
            element.id = msg._id + 'showMeButton';

            element = document.getElementById("blockUserButton");
            element.id = msg._id + 'blockUserButton';

            element = document.getElementById("exitNudgeButton");
            element.id = msg._id + 'exitNudgeButton';


            document.getElementById(msg._id + 'deleteMessageButton').onclick=function(){onClickDeleteMessageButton(msg)};
            document.getElementById(msg._id + 'showMeButton').onclick=function(){onClickShowMeButton(msg)};
            document.getElementById(msg._id + 'blockUserButton').onclick=function(){onClickBlockUserButton(msg)};
            document.getElementById(msg._id + 'exitNudgeButton').onclick=function(){onClickExitNudgeButton(msg)};
        }

        function onClickExitNudgeButton(msg) {
            document.getElementById(msg._id + 'nudgeType2').remove();
            // No need to emit an event to the server here, since this action doesn't change the state of the users or messages.
        }


        function onClickDeleteMessageButton(msg) {
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);
        }

        function onClickBlockUserButton(msg) {
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "blockUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }


        function onClickShowMeButton(msg) {
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "showMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $('#' + chatPartnerUserId + 'lastMessage').text(msg.msg.body);
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
        }

        
