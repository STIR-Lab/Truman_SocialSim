extends ui_layout

block content
    link(rel='stylesheet' href='https://www.w3schools.com/w3css/4/w3.css')
    .row
        .five.wide.column
            .ui.segment(style='height:90vh')
                .ui.basic.fluid(style="margin-bottom:18px") 
                        h3.ui.header(style="margin-top:2px") 
                            i.comments.icon
                            |   Messages  
                            
                
                #recentChatHistory(style="margin-top:4px") 
                    #chatHistory.ui.relaxed.divided.list
           
                #discoverProfiles.ui.grid.stackable
                    #discoverProfileNoUsersText.p(style="margin-top:20px") There are no new users online.

        .eleven.wide.column
            .ui.segment(style='height:90vh')
                h2#chatPartnerName.ui.left.floated.header
                button#newChatButton.positive.ui.button.right.floated(style="margin-bottom:10px") 
                    i.pencil.alternate.icon
                    |   New Chat
                #chatBoxTitleDivider.ui.clearing.divider

                .messages.container(style="height: 70vh; overflow: hidden; display:flex; flex-direction: column-reverse; position: relative")
                    #messages.ui.grid(style="justify-content: start; padding:10px; position: relative; overflow-y: scroll;")

                #nudge3Card.ui.card(style='position: absolute; bottom: -60px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                    .content
                        #closeNudge3.button.ui.circular.basic.icon.mini.right.floated.button
                            i.close.icon
                        p Risky message detected, here are some ways you can respond
                    .ui.vertical.buttons
                        #nudge3Button1.button.fluid.ui.button(style="margin-bottom:4px") I don't feel comfortable sharing that info
                        #nudge3Button2.button.fluid.ui.button(style="margin-bottom:4px") Sorry, I don't know you
                        #nudge3Button3.button.fluid.ui.button(style="margin-bottom:4px") I don't think it's appropriate to ask that
                        #nudge3Button4.button.fluid.ui.button(style='background-color: rgba(255,0,0,0.3)') Block
                        #nudge3Button5.button.fluid.ui.button(style='background-color: rgba(255,0,0,0.3)') Report


                //- form#messageInput(action='')
                //-     .ui.fluid.icon.input(style='position: absolute; bottom: 10px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                //-         img#outputImage(src="#" style="width: 60px; height:auto; position: absolute; bottom: 70px; left: 50%; display: none;")
                //-         #sending(src="#" style="position: absolute; bottom: 50px; left: 50%; display: none;")
                //-             code
                //-                 | sending...
                //-         input#input(autocomplete="off" type='text' placeholder='Enter message')
                //-         button#submitMessage(type="submit")
                //-             i.paper.plane.icon 
                //-         button(type="button" style='position: relative; right: 2px;')     
                //-             label.custom-file-upload(for='fileupload' )
                //-                 i.camera.icon
                //-         input#fileupload(type='file' style="display: none;" name="fileupload" accept="image/*,video/mp4,video/x-m4v,video/*")
                //-         button#uploadImage(type="button" style='position: relative; right: 2px; display: none;')     

                //- #userIdTag(userId=user.id)
                //- #usernameTag(username=user.username)
                //- #userProfilePicture(userpfp = user.profile.picture ? user.profile.picture : "https://socialsimulation.s3.amazonaws.com/default-pfp.png")
 
                form#messageInput(action='')
                    .ui.fluid.icon.input(style='position: absolute; bottom: 10px; left: 50%; transform: translate(-50%, -50%); width:450px;')
                        img#outputImage(src="#" style="width: 60px; height:auto; position: absolute; bottom: 50px; left: 10px; display: none; border: 1px solid grey;")
                        button#cancelImageUpload.ui.icon.button(style="position: absolute; width: 15px; height: 15px; bottom: 75px; left: 75px; display: none; align-items: center; justify-content: center;  padding: 0; border: none;")
                            i.close.icon(style="font-size: 10px;")

                            


                        #sending(src="#" style="position: absolute; bottom: 50px; left: 50%; display: none;")
                            code
                                | sending...
                        input#input(autocomplete="off" type='text' placeholder='Enter message')
                        button#submitMessage(type="submit")
                            i.paper.plane.icon 
                        button(type="button" style='position: relative; right: 2px;')     
                            label.custom-file-upload(for='fileupload' )
                                i.camera.icon
                        input#fileupload(type='file' style="display: none;" name="fileupload" accept="image/*,video/mp4,video/x-m4v,video/*")
                        button#uploadImage(type="button" style='position: relative; right: 2px; display: none;')     

                    #userIdTag(userId=user.id)
                    #usernameTag(username=user.username)
                    #userProfilePicture(userpfp = user.profile.picture ? user.profile.picture : "https://socialsimulation.s3.amazonaws.com/default-pfp.png")

    #newChatModal.ui.mini.modal
        .header
            .ui.center.aligned.container
                | New Message
        .content
            #userList.ui.relaxed.divided.list

    //- .ui.modal#nudge1Modal(style='width: 400px; border: 1px solid black; padding: 0; border-radius: 15px;')
    
    //-     //- Close Button
    //-     i.close.icon#dismissModal1Button(style='position: absolute; top: 1px; right: 8px; color: black;')

    //-     .content(style='border: 1px solid #ddd; padding: 40px 20px 20px 20px; background-color: #f9f9f9; flex-grow: 1; text-align: center; border-radius: 15px; font-size: 14px;')
    //-         .ui.center.aligned.container(style='white-space: pre-line;')
    //-             | This user is asking for #[strong(style='color: red;') sensitive information]
    //-             | which may compromise your privacy.
    //-     .actions(style='border-top: 1px solid #ddd; padding: 10px; background-color: #f9f9f9; text-align: center; border-radius: 15px;')
    //-         .ui.attached.buttons
    //-             //- button.ui.basic.button#dismissModal1Button(style='border-right: 1px solid black; flex: 1; text-align: center; white-space: normal;')
    //-             //-     | Yes, Continue
    //-             button.ui.basic.button#leaveModalButton(style='border-right: 1px solid black; flex: 1; text-align: center; white-space: normal;')
    //-                 | Exit Chat
    //-             button.ui.basic.button#blockModal1Button(style='flex: 1; text-align: center; white-space: normal; color: red;')
    //-                 | #[strong(style='color: red;') Block User]
        
    //- //- New div to separate the bubble buttons from the nudge box
    //- div(style='text-align: center; padding-top: 10px;')
    //-     .ui.vertical.buttons
    //-         #nudge3Button1.button.fluid.ui.button(style='margin-bottom: 4px; border-radius: 15px; padding: 10px; background-color: #e0e0e0;')
    //-             | Sorry, I don't want to share that
    //-         #nudge3Button2.button.fluid.ui.button(style='margin-bottom: 4px; border-radius: 15px; padding: 10px; background-color: #e0e0e0;')
    //-             | I don't feel comfortable sharing that
    //-         #nudge3Button3.button.fluid.ui.button(style='margin-bottom: 4px; border-radius: 15px; padding: 10px; background-color: #e0e0e0;')
    //-             | Lol that's private information

    style.
        .ui.dimmer {
            background-color: transparent !important;
            opacity: 1 !important;
        }
        .ui.modal#nudge1Modal {
            top: 76%;
            left: 60%;
            transform: translate(-50%, -50%);
            position: fixed;
        }
        .ui.modal#nudge1Modal2 {
            top: 89%;
            left: 70%;
            transform: translate(-50%, -50%);
            position: fixed;
            background-color: transparent !important;
            opacity: 1 !important;
            border: none !important;
            box-shadow: none !important;
        }
        .bubble-button {
            margin-right: 5px; 
            max-width: 200px;
            white-space: normal;
            border-radius: 30px !important;
            &:last-child {
                margin-right: 0;
            }
        }
    .ui.modal#nudge1Modal(style='width: 400px;  padding: 0; border-radius: 15px; background-color: #f9f9f9;')

        //- Close Button
        i.close.icon#dismissModal1Button(style='position: absolute; top: 1px; right: 8px; color: black;')

        //- Enclosing the content and actions in a div
        div(style='background-color: #f9f9f9; border: 1px  #ddd; border-radius: 15px; margin-bottom: 10px;')
            .content(style='padding: 40px 20px 20px 20px; flex-grow: 1; text-align: center; font-size: 14px;')
                .ui.center.aligned.container(style='white-space: pre-line;')
                    | This user is asking for #[strong(style='color: red;') sensitive information]
                    | which may compromise your privacy.

            .actions(style='border-top: 1px  #ddd; padding: 10px; text-align: center;')
                .ui.attached.buttons
                    //- button.ui.basic.button#dismissModal1Button(style='border-right: 1px solid black; flex: 1; text-align: center; white-space: normal;')
                    //-     | Yes, Continue
                    button.ui.basic.button#leaveModalButton(style='border-right: 1px ; flex: 1; text-align: center; white-space: normal;')
                        | Exit Chat
                    button.ui.basic.button#blockModal1Button(style='flex: 1; text-align: center; white-space: normal; color: red;')
                        | #[strong(style='color: red;') Block User]

    .ui.modal#nudge1Modal2
        .ui.horizontal.buttons(style='text-align: center; padding-top: 10px;')
            #nudge1Button1.button.fluid.ui.button.bubble-button.transparent-button(style='margin-right: 1px; border-radius: 5px; padding: 10px; background-color: #e0e0e0;')
                | Sorry, I don't want to share that
            #nudge1Button2.button.fluid.ui.button.bubble-button.transparent-button(style='margin-right: 5px; border-radius: 5px; padding: 10px; background-color: #e0e0e0;')
                | I don't feel comfortable sharing that
            #nudge1Button3.button.fluid.ui.button.bubble-button.transparent-button(style='border-radius: 5px; padding: 10px; background-color: #e0e0e0;')
                | Lol that's private information





    style.
        .ui.dimmer {
            background-color: transparent !important;
            opacity: 1 !important;
        }
        .ui.modal#nudge2NewModal {
            top: 76%;
            left: 60%;
            transform: translate(-50%, -50%);
            position: fixed;
        }
        
    .ui.modal#nudge2NewModal(style='width: 450px;  padding: 0; border-radius: 15px; background-color: #f9f9f9;')
        //- Close Button
        i.close.icon#dismissNudge2NewModal(style='position: absolute; top: 1px; right: 8px; color: black;')

        //- Enclosing the content and actions in a div
        div(style='background-color: #f9f9f9; border: 1px #ddd; border-radius: 15px; margin-bottom: 10px;')
            .content(style='padding: 40px 20px 20px 20px; flex-grow: 1; text-align: center; font-size: 15px;')
                .ui.center.aligned.container(style='white-space: pre-line;')
                    | This user can no longer chat with you as they
                    | are not in your friends list and sent you
                    | #[strong(style='color: red;') inappropriate messages]. Would you like to exit
                    | this conversation?

            .actions(style='border-top: 1px #ddd; padding: 10px; text-align: center;')
                .ui.attached.buttons
                    button.ui.basic.button#leaveNudge2NewModal(style='border-right: 1px; flex: 1; text-align: center; white-space: normal;')
                        | Exit Chat
                    button.ui.basic.button#leaveAndBlockNudge2NewModal(style='flex: 1; text-align: center; white-space: normal; color: red;')
                        | #[strong(style='color: red;') Block User]
                    button.ui.basic.button#continueModal(style='border-right: 1px; flex: 1; text-align: center; white-space: normal;')
                        | Continue Chat
                
    style.
        .ui.dimmer {
            background-color: transparent !important;
            opacity: 1 !important;
        }
        .ui.modal#newNudge4Modal {
            top: 76%;
            left: 60%;
            transform: translate(-50%, -50%);
            position: fixed;
        }
    #nudge2Modal.ui.mini.modal
        .content.center.aligned.column
            .ui.center.aligned.container
                | We detected that this user just sent you explicit content. We recommend you exercise care with the user
        .actions.ui
            #dismissModal2Button.button.ui.button
                | Dismiss

    #letOthersKnowAbout.ui.mini.modal
        .content
            #letOthersKnowAboutContent.ui.center.aligned.container    
                |
        .actions
            #dismissModalEveryoneButton.button.ui.button
                | Dismiss

    
    .ui.modal#newNudge4Modal(style='width: 450px;  padding: 0; border-radius: 15px; background-color: #f9f9f9;')
        //- Close Button
        i.close.icon#dismissNudge4NewModal(style='position: absolute; top: 1px; right: 8px; color: black;')

        div(style='background-color: #f9f9f9; border: 1px #ddd; border-radius: 15px; margin-bottom: 10px;')
            .content(style='padding: 40px 20px 20px 20px; flex-grow: 1; text-align: center; font-size: 15px;')
                .ui.center.aligned.container(style='white-space: pre-line;')
                    | The last message is hidden due to potentially
                    | #[strong(style='color: red;') explicit content]. Would you like to delete this
                    | message?

            .actions(style='border-top: 1px #ddd; padding: 10px; text-align: center;')
                .ui.attached.buttons
                    button.ui.basic.button#newNudge4ModalDeleteButton(style='border-right: 1px; flex: 1; text-align: center; white-space: normal;')
                        | Delete Message
                    button.ui.basic.button#leaveAndBlockNudge2NewModal(style='flex: 1; text-align: center; white-space: normal; color: red;')
                        | #[strong(style='color: red;') Block User]
                    button.ui.basic.button#newNudge4ModalDeleteAndUpdateButton(style='border-right: 1px; flex: 1; text-align: center; white-space: normal;')
                        | Notify Other Users
        
    
    
                    
                

    script(src='/socket.io/socket.io.js')
    script.
        console.log('script start', Date.now())
        const userId = document.getElementById('userIdTag').getAttribute('userId');
        const username = document.getElementById('usernameTag').getAttribute('username');
        const userpfp = document.getElementById('userProfilePicture').getAttribute('userpfp');

        // hide input until user picks chat partner
        $('#messageInput').hide();
        $('#nudge3Card').hide();
        $("#chatBoxTitleDivider").hide()
        $('#newChatButton').hide()
        document.getElementById('newChatButton').onclick = function () {
            onClickNewChat()
        };
        document.getElementById('fileupload').onchange = function () {
            loadFile(event)
        };

        function onClickNewChat() {
            $('#newChatModal').modal('setting', 'closable', false).modal('show');
        }

        //for deployment
        //const URL = "http://18.224.25.178:3000/";
        const URL = "http://sim.socialmediayouth.org/"
        // for production
        //const URL = "ws://localhost:3000";
        const sessionId = localStorage.getItem("sessionId");
        let auth = null

        if (sessionId) {
            auth = {sessionId, username, userId, userpfp};
            console.log('connect start 1', sessionId, auth)
            // socket.connect();
        } else {
            auth = {username, userId, userpfp};
            console.log('connect start 2', sessionId, auth)
        }

        const socket = io(window.location.host, { auth });
        socket.on('connect', () => {
            console.log('connect start', Date.now())
        })
        socket.on('disconnect', () => {
            console.log('disconnect start', Date.now())
        })
        socket.onAny((event, ...args) => {
            console.log(event, args);
        });


        socket.on("session", ({sessionId, userId}) => {
            // attach the session ID to the next reconnection attempts
            // socket.remo
            // socket.auth = {sessionId};
            localStorage.setItem("sessionId", sessionId);
            // socket.userId = userId;
        });

        socket.on("connect_error", (err) => {
            console.log(`connect_error due to ${err.message}`);
        });


        let copiedUserList = null;

        let usersInUserList = [];

        let loadedHistory = false;

        let usersInDiscover = [];
        let usersInRecent = [];

        let allConversations = null;

        socket.on("userList", (userList) => {
            console.log("CURR userList")
            console.log(userList)
            if (userList.length == 1) return;
            copiedUserList = JSON.parse(JSON.stringify(userList));


            userList.forEach((user) => {
                if (!usersInUserList.includes(user.userId)) {
                    usersInUserList.push(user.userId);
                    // New Chat Button
                    const u = ` <div class="item">
                                                        <div class="content">
                                                            <div class="header">${user.username}</div>
                                                        </div>
                                                        <button id="rightArrowButton${user.userId}" class="ui icon right floated mini button" style="margin-top:-20px" data-chat-partner-id="${user.userId}" onclick="onClickUsername(event)"><i data-chat-partner-id="${user.userId}" class="right arrow icon"></i></button>
                                                    </div>`

                    if (user.userId == userId) { // add user to top of user list
                        $('#userList').prepend(u);
                    } else {
                        $('#userList').append(u);
                    }

                    // add onClick function to button
                    // let element = document.getElementById("rightArrowButton");
                    // element.id = user.userId + 'rightArrowButton';
                    // document.getElementById(user.userId + 'rightArrowButton').onclick = function () {
                    //     onClickUsername(user.userId)
                    // };

                    if (user.userId == userId) { // do not allow user to chat itself
                        document.getElementById(user.userId + 'rightArrowButton').remove();
                    }

                } else {
                    usersInUserList = usersInUserList.filter(item => item != user.userId);
                }
            });

            copiedUserList.forEach((user) => {
                console.log('addRestOfUsers')
                console.log('active user' + user.userId + ' ' + user.username)
                addRestOfUsers(user)
                //addUserInDiscover(user);
            });

            console.log('copiedUserList')
            console.log(copiedUserList)

            console.log('usersInRecentList')
            console.log(usersInRecentList)

            console.log('usersInHistory')
            console.log(usersInHistory)

            // deal with any status changes in the copiedUserList
            // if you are in the copiedUserList, that means you are active, so change their status
            let activeIDs = [];
            for (let i = 0; i < copiedUserList.length; i++) {
                if (copiedUserList[i].userId != userId) {
                    console.log(copiedUserList[i].userId)
                    console.log('active: activeIcon-' + copiedUserList[i].userId)
                    console.log(document.getElementById("activeIcon-" + copiedUserList[i].userId))
                    $('#activeIcon-' + copiedUserList[i].userId).removeClass().addClass("green circle icon")
                    activeIDs.push(copiedUserList[i].userId)
                }
            }

            // the rest of the users are not active, so change their status
            for (let i = 0; i < usersInHistory.length; i++) {
                // check if copiedUserList contains user
                let contains = false;

                for (let j = 0; j < copiedUserList.length; j++) {
                    if (copiedUserList[j].userId == usersInHistory[i].userId) {
                        contains = true;
                    }
                }

                if (!contains && usersInHistory[i].userId != userId) {
                    console.log(usersInHistory[i].userId)
                    console.log('inactive: activeIcon-' + usersInHistory[i].userId)
                    console.log(document.getElementById("activeIcon-" + usersInHistory[i].userId))
                    $('#activeIcon-' + usersInHistory[i].userId).removeClass().addClass("orange moon icon")
                }
            }
            for (let i = 0; i < usersInRecentList.length; i++) {
                // check if copiedUserList contains user
                let contains = false;

                for (let j = 0; j < copiedUserList.length; j++) {
                    if (copiedUserList[j].userId == usersInRecentList[i].userId) {
                        contains = true;
                    }
                }

                if (!contains && usersInRecentList[i].userId != userId) {
                    console.log(usersInRecentList[i].userId)
                    console.log('inactive: activeIcon-' + usersInRecentList[i].userId)
                    console.log(document.getElementById("activeIcon-" + usersInRecentList[i].userId))
                    $('#activeIcon-' + usersInRecentList[i].userId).removeClass().addClass("orange moon icon")
                }
            }


            // if you are not in copiedUserList and are in usersInRecentList
            console.log('usersInRecentList')
            console.log(usersInRecentList)
            console.log('copiedUserList')
            console.log(copiedUserList)
            for (let i = 0; i < usersInRecentList.length; i++) {
                let contains = false;

                for (let j = 0; j < copiedUserList.length; j++) {
                    if (copiedUserList[j].userId == usersInRecentList[i].userId) {
                        contains = true;
                    }
                }

                if (!contains) {
                    console.log('remove: ')
                    console.log(usersInRecentList[i])
                    // $(`#listItemChatPartener-${usersInRecentList[i].userId}`).remove();
                    usersInRecentList = usersInRecentList.filter((userInFilter) => userInFilter.userId != usersInRecentList[i].userId)
                }
            }


        });

        $('#discoverProfiles').hide();
        let usersInHistory = [];
        let usersInRecentList = [];


        let numUnread = 0;


        // HANDLES THE MESSAGED USERS (ACTIVE AND INACTIVE)
        async function addUserInHistory(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType) {
            console.log('addUserInHistory')
            console.log(chatPartnerUsername)
            user = {
                userId: chatPartnerId,
                username: chatPartnerUsername
            }
            let active = ""
            let activeClass = ""
            // check if copiedUserList contains user
            if (copiedUserList && copiedUserList.length) {
                for (let i = 0; i < copiedUserList.length; i++) {
                    if (copiedUserList[i].userId == chatPartnerId) {
                        console.log("found user")
                        active = "USER ACTIVE"
                        activeClass = "green circle icon"
                        break;
                    }
                }
            }

            console.log("active: " + active)

            if (active == "") {
                active = "USER INACTIVE"
                activeClass = "orange moon icon"
            }

            let lastmsg = lastMessage;
            if (msgType == "img" || msgType == "vid") {
                lastmsg = "Sent media"
            }

            if (usersInRecent.includes(chatPartnerId)) {
                return;
            }
            usersInRecent.push(chatPartnerId);

            // if the userID is already in the usersInRecentList, than directly edit the item
            // else, add a new item
            let found = false;
            for (let i = 0; i < usersInRecentList.length; i++) {
                if (usersInRecentList[i].userId == chatPartnerId) {
                    console.log("found user userinRecentList")
                    found = true;
                    break;
                }
            }
            for (let i = 0; i < usersInHistory.length; i++) {
                if (usersInHistory[i].userId == chatPartnerId) {
                    console.log("found user userInHistory")
                    found = true;
                    break;
                }
            }
            if (found) {
                console.log("found user")
                $(`#listItemChatPartener-${chatPartnerId}`).remove();
                const listItem = `<div class="item" id="listItemChatPartener-${chatPartnerId}" style="display: flex; flex-direction: row; justify-content: space-between;">
                                                        <div style="display: flex; flex-direction: row; justify-content: flex-start;">
                                                            <div style="position: relative;">
                                                                <span id="redBubble-${chatPartnerId}" class="w3-badge w3-red" style="z-index:10; position: absolute; color: white !important"></span>
                                                                <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                                                <i id="activeIcon-${chatPartnerId}" style="position: absolute; bottom: 0; left: 0;" class="${activeClass}"></i>
                                                            </div>
                                                            <div class="content">
                                                                <!-- For now we are disabling the onclick for user name here because it crashes the entire app -->
                                                                <!-- <a class="header" href="/user/${chatPartnerUsername}">${chatPartnerUsername}</a> -->
                                                                <a class="header">${chatPartnerUsername}</a>
                                                                <div class="description" style="max-width: 180px" id="lastMessage-${chatPartnerId}">${lastmsg}</div>
                                                            </div>

                                                        </div>
                                                        <button id="rightChevronButton${chatPartnerId}" style="margin-left: auto;" class="ui icon right floated mini button" data-chat-partner-id="${chatPartnerId}" onclick="onClickUsername(event)"><i data-chat-partner-id="${chatPartnerId}" class="angle right icon"></i></button>
                                                    </div>`;

                $('#chatHistory').prepend(listItem);
            } else {
                const listItem = `<div class="item" id="listItemChatPartener-${chatPartnerId}" style="display: flex; flex-direction: row; justify-content: space-between;">
                                                            <div style="display: flex; flex-direction: row; justify-content: flex-start;">
                                                                <div style="position: relative;">
                                                                    <span id="redBubble-${chatPartnerId}" class="w3-badge w3-red" style="z-index:10; position: absolute; color: white !important"></span>
                                                                    <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                                                    <i id="activeIcon-${chatPartnerId}" style="position: absolute; bottom: 0; left: 0;"class="${activeClass}"></i>
                                                                </div>
                                                                <div class="content">
                                                                    <!-- For now we are disabling the onclick for user name here because it crashes the entire app -->
                                                                    <!-- <a class="header" href="user/${chatPartnerUsername}">${chatPartnerUsername}</a> -->
                                                                    <a class="header">${chatPartnerUsername}</a>
                                                                    <div class="description" style="max-width: 180px" id="lastMessage-${chatPartnerId}">${lastmsg}</div>
                                                                </div>
                                                            </div>
                                                            <button id="rightChevronButton${chatPartnerId}" style="margin-left: auto;" class="ui icon right floated mini button" data-chat-partner-id="${chatPartnerId}" onclick="onClickUsername(event)"><i data-chat-partner-id="${chatPartnerId}" class="angle right icon"></i></button>
                                                        </div>`;

                $('#chatHistory').append(listItem);
            }


            usersInHistory.push({userId: chatPartnerId, username: chatPartnerUsername});

            await socket.emit("find-partner", {userId: chatPartnerId})
            await socket.on("partner-pfp", ({pfp, userId}) => {
                if (pfp != null && userId == chatPartnerId) {
                    let pic = `https://socialsimulation.s3.amazonaws.com/${pfp}`;
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = pic;
                } else if (userId == chatPartnerId) {
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = "https://socialsimulation.s3.amazonaws.com/default-pfp.png";
                }
            })

            // let element = document.getElementById("lastMessage");
            // element.id = chatPartnerId + 'lastMessage';

            $(`#redBubble-${chatPartnerId}`).hide();
            $(`#redBubble-${chatPartnerId}`).text(0);

            // element = document.getElementById("rightChevronButton");
            // element.id = 'rightChevronButton' + chatPartnerId;
            // document.getElementById('rightChevronButton'+chatPartnerId).onclick=function(){onClickUsername(chatPartnerId)};

            $(`#redBubble-${chatPartnerId}`).text(numUnread);
            if (numUnread > 0) {
                $(`#redBubble-${chatPartnerId}`).show();
            }
        }

        // make this the main function to handle adding user to the singular tab -> use messages list, copiedUserList, and usersInHistory
        // make sure to not add the user if already in the list
        // DEALS WITH THE USERS THAT ARE ACTIVE AND HAVE NOT BEEN MESSAGED
        async function addRestOfUsers(user) {
            let chatPartnerId = user.userId
            let chatPartnerUsername = user.username

            console.log("addRestOfUsers")
            console.log({id: chatPartnerId, name: chatPartnerUsername})
            console.log({selfID: userId, selfName: username})
            if (chatPartnerId == userId) {
                return;
            }
            // check if usersInRecentList has the same userId
            for (let i = 0; i < usersInRecentList.length; i++) {
                if (usersInRecentList[i].userId == chatPartnerId) {
                    return;
                }
            }
            // check if usersInHistory has the same userId
            for (let i = 0; i < usersInHistory.length; i++) {
                if (usersInHistory[i].userId == chatPartnerId) {
                    return;
                }
            }

            const listItem = `<div class="item" id="listItemChatPartener-${chatPartnerId}" style="display: flex; flex-direction: row; justify-content: space-between;">
                                                    <div style="display: flex; flex-direction: row; justify-content: flex-start;">
                                                        <div style="position: relative;">
                                                            <span id="redBubble-${chatPartnerId}" class="w3-badge w3-red" style="z-index:10; position: absolute; color: white !important"></span>
                                                            <img class="ui avatar image" id="chatPartnerPFP-${chatPartnerId}" src="" style="margin-left:5px; margin-top:5px">
                                                            <i id="activeIcon-${chatPartnerId}" style="position: absolute; bottom: 0; left: 0;" class="green circle icon"></i>
                                                        </div>

                                                        <div class="content">
                                                            <a class="header" href="http://localhost:3000/user/${chatPartnerUsername}">${chatPartnerUsername}</a>
                                                            <div class="description" style="max-width: 180px" id="lastMessage-${chatPartnerId}">Start a Conversation!</div>
                                                        </div>
                                                    </div>
                                                    <button id="rightChevronButton${chatPartnerId}" style="margin-left: auto;"class="ui icon right floated mini button" data-chat-partner-id="${chatPartnerId}" onclick="onClickUsername(event)"><i data-chat-partner-id="${chatPartnerId}" class="angle right icon"></i></button>
                                                </div>`;

            $('#chatHistory').append(listItem);
            usersInRecentList.push({userId: chatPartnerId, username: chatPartnerUsername});


            await socket.emit("find-partner", {userId: chatPartnerId})
            await socket.on("partner-pfp", ({pfp, userId}) => {
                if (pfp != null && userId == chatPartnerId) {
                    let pic = `https://socialsimulation.s3.amazonaws.com/${pfp}`;
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = pic;
                } else if (userId == chatPartnerId) {
                    document.getElementById(`chatPartnerPFP-${chatPartnerId}`).src = "https://socialsimulation.s3.amazonaws.com/default-pfp.png";
                }
            })

            // let element = document.getElementById("rightChevronButton");
            // element.id = 'rightChevronButton' + chatPartnerId;
            // document.getElementById('rightChevronButton' + chatPartnerId).onclick=function(){onClickUsername(chatPartnerId)};


        }

        let blocked = [];
        let isBlocked = [];

        let reported = [];
        let isReported = [];

        socket.on('discover-users', (formattedAllUsers) => {
            console.log('discover-users')
            console.log(formattedAllUsers)
        })


        // only called at the beginning of the page load
        socket.on("receive-chat-history", (allConvo) => {
            console.log("CURR receive-chat-history")
            console.log(allConvo)
            alLConversations = allConvo;
            /*
            if (allConvo.length == 0) {
                $('#recentButton').hide();
                $('#recentChatHistory').hide();
                $('#discoverProfiles').show();
            }
            */

            usersInHistory = [];

            loadedHistory = true;

            allConvo.forEach((chatPartner) => {
                let chatPartnerUsername = chatPartner.usernameA == username ? chatPartner.usernameB : chatPartner.usernameA;
                let chatPartnerId = chatPartner.userIdA == userId ? chatPartner.userIdB : chatPartner.userIdA;
                let lastMessage = ""
                let msgType = chatPartner.content[chatPartner.content.length - 1].msg.type

                if (chatPartner.blocked == chatPartnerId) {
                    blocked.push(chatPartnerId);
                }

                if (chatPartner.blocked == userId) {
                    isBlocked.push(chatPartnerId);
                }

                if (chatPartner.reported == chatPartnerId) {
                    reported.push(chatPartnerId);
                }

                if (chatPartner.reported == userId) {
                    isReported.push(chatPartnerId);
                }

                if (chatPartner.content[chatPartner.content.length - 1].msg.type == "txt")
                    if (chatPartner.content[chatPartner.content.length - 1].from.userId == userId) { // chat sent
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    } else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && (chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "deleteMessage" || chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "deleteMessageAndLetOthersKnow")) {
                        lastMessage = "Deleted message"
                    } else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "") {
                        lastMessage = "Unread message"
                    } else {
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    }
                else {
                    lastMessage = "Sent media"
                }

                usersInHistory.push({
                    userId: chatPartnerId,
                    username: chatPartnerUsername,
                    userpfp: chatPartnerPFP
                });

                numUnread = chatPartner.content.filter(c => c.from.userId == chatPartnerId).filter(c => !c.msg.read).length

                addUserInHistory(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType);
            });


            // First handle all of the users that are messaged.
            // Then handle all of the users that are active but not messaged. - pretty much discover tab
            // Then handle all of the users that are inactive.
            console.log('usersInHistory')
            console.log(usersInHistory)
            console.log('usersInRecentList')
            console.log(usersInRecentList)
            console.log('copiedUserList')
            console.log(copiedUserList)

            if (!copiedUserList || !copiedUserList.length) return;
            copiedUserList.forEach((user) => {
                console.log('addRestOfUsers')
                console.log('active user' + user.userId + ' ' + user.username)
                addRestOfUsers(user)
                //addUserInDiscover(user);
            });
            console.log(usersInHistory)
        });

        // used by userList socket event takes the allConvo.
        async function allOfTheConversation(allConvo) {
            console.log("CURR allOfTheConversation")
            if (!allConvo) {
                return;
            }
            console.log(allConvo)
            allConvo.forEach((chatPartner) => {
                let chatPartnerUsername = chatPartner.usernameA == username ? chatPartner.usernameB : chatPartner.usernameA;
                let chatPartnerId = chatPartner.userIdA == userId ? chatPartner.userIdB : chatPartner.userIdA;
                let lastMessage = ""
                let msgType = chatPartner.content[chatPartner.content.length - 1].msg.type

                if (chatPartner.blocked == chatPartnerId) {
                    blocked.push(chatPartnerId);
                }

                if (chatPartner.blocked == userId) {
                    isBlocked.push(chatPartnerId);
                }

                if (chatPartner.reported == chatPartnerId) {
                    reported.push(chatPartnerId);
                }

                if (chatPartner.reported == userId) {
                    isReported.push(chatPartnerId);
                }

                if (chatPartner.content[chatPartner.content.length - 1].msg.type == "txt")
                    if (chatPartner.content[chatPartner.content.length - 1].from.userId == userId) { // chat sent
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    } else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && (chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "deleteMessage" || chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "deleteMessageAndLetOthersKnow")) {
                        lastMessage = "Deleted message"
                    } else if (chatPartner.content[chatPartner.content.length - 1].nudge.nudgeType == "sensitivityFilter" && chatPartner.content[chatPartner.content.length - 1].nudge.userAction == "") {
                        lastMessage = "Unread message"
                    } else {
                        lastMessage = chatPartner.content[chatPartner.content.length - 1].msg.body;
                    }
                else {
                    lastMessage = "Sent media"
                }

                usersInHistory.push({
                    userId: chatPartnerId,
                    username: chatPartnerUsername,
                    userpfp: chatPartnerPFP
                });

                numUnread = chatPartner.content.filter(c => c.from.userId == chatPartnerId).filter(c => !c.msg.read).length

                addUserInHistory(chatPartnerUsername, lastMessage, chatPartnerId, numUnread, msgType);
            });


            // First handle all of the users that are messaged.
            // Then handle all of the users that are active but not messaged. - pretty much discover tab
            // Then handle all of the users that are inactive.
            console.log('usersInHistory')
            console.log(usersInHistory)
            console.log('usersInRecentList')
            console.log(usersInRecentList)
            console.log('copiedUserList')
            console.log(copiedUserList)


            copiedUserList.forEach((user) => {
                console.log('addRestOfUsers')
                console.log('active user' + user.userId + ' ' + user.username)
                addRestOfUsers(user)
                //addUserInDiscover(user);
            });
            console.log(usersInHistory)
        }


        /*
        function addUserInDiscover(user) {
            let count = 0;
            let prevRow = count;
            const row = `<div id="prevRow" class="row"></div>`;

            $('#discoverProfiles').append(row);
            let element = document.getElementById("prevRow");
            element.id = 'row' + count;

            if (user.userId != userId && !usersInHistory.filter(element => element.userId == user.userId).length && !usersInDiscover.includes(user.userId)) {
                usersInDiscover.push(user.userId);
                count++;
                if (count > 0 && count % 2 == 0) {
                    $('#discoverProfiles').append(row);
                    prevRow = count;
                }

                const userpfpsrc = user.userpfp ? "https://socialsimulation.s3.amazonaws.com/" + user.userpfp : "https://socialsimulation.s3.amazonaws.com/default-pfp.png";
                // Discover profile
                const profile = ` <div class="eight wide column">
                                    <div class="ui card" style="margin-bottom:10px">
                                        <div class="content">
                                            <div class="center aligned column"><img class="ui circular tiny image" src=${userpfpsrc} style="margin-bottom:4px; object-fit:cover; width:75px; height:75px"/></div>
                                            <div class="description" style="text-align: center; margin-bottom:4px;">@${user.username} ****Active</div>
                                            <button id="profileButton" class="ui button tiny fluid fluid" style="margin-bottom:4px">Profile </button>
                                            <button id="messageButton" class="ui positive button tiny fluid">Message </button>
                                        </div>
                                    </div>
                                </div>`

                document.getElementById('row' + prevRow).insertAdjacentHTML('beforeend', profile);

                let element = document.getElementById("profileButton");
                element.id = user.userId + 'profileButton';
                document.getElementById(user.userId + 'profileButton').onclick=function(){onClickProfile(user.userId)};

                element = document.getElementById("messageButton");
                element.id = user.userId + 'messageButton';
                document.getElementById(user.userId + 'messageButton').onclick=function(){onClickUsername(user.userId)};

                $('#discoverProfileNoUsersText').hide();
            }
        }
        */
        function onClickProfile(userId) {
            console.log("clicked");
            window.location.href = "/user/" + chatPartnerUsername;
        }

        /*
        document.getElementById('recentButton').onclick=function(){onClickRecentButton()};
        function onClickRecentButton() {
            $('#recentButton').addClass('active');
            $('#discoverButton').removeClass('active');
            $('#discoverProfiles').hide();
            $('#recentChatHistory').show();
        }

        document.getElementById('discoverButton').onclick=function(){onClickDiscoverButton()};
        function onClickDiscoverButton() {
            if (history) {
                $('#discoverButton').addClass('active');
                $('#recentButton').removeClass('active');
                $('#discoverProfiles').show();
                $('#recentChatHistory').hide();
            }
        }
        */

        let chatPartnerSocketId = null;
        let chatPartnerUsername = null;
        let chatPartnerUserId = null;
        let chatPartnerPFP = "https://socialsimulation.s3.amazonaws.com/default-pfp.png";

        function onClickUsername(event) {
            const userId = event.target.dataset.chatPartnerId;
            console.log(userId, 'onClickUsername', event.target)
            $(`#redBubble-${userId}`).hide();

            $(`#redBubble-${userId}`).text(0);
            if (copiedUserList && copiedUserList.length) {
                // find user in online list
                copiedUserList.forEach((user) => {
                    if (user.userId == userId) {
                        chatPartnerSocketId = user.socketId;
                        chatPartnerUsername = user.username;
                        chatPartnerUserId = user.userId;
                    }
                });
            }

            if (usersInHistory && usersInHistory.length) {

                // find user in chat history
                usersInHistory.forEach((user) => {
                    if (user.userId == userId) {
                        chatPartnerUsername = user.username;
                        chatPartnerUserId = user.userId;
                    }
                });
            }

            socket.emit("find-partner", {userId: chatPartnerUserId})

            socket.on("partner-pfp", ({pfp, userId}) => {
                if (pfp != null && userId == chatPartnerUserId) {
                    chatPartnerPFP = `https://socialsimulation.s3.amazonaws.com/${pfp}`;
                }
            })

            $("#chatPartnerName").text(chatPartnerUsername);
            $("#chatBoxTitleDivider").show()
            $('#messages').empty();
            $('#messageInput').show();
            $('#newChatModal').modal('hide');

            // after we get the chat partner info we want to get all messages
            socket.emit('get-messages', {
                to: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            })
        }

        // researcher set variable to show nudges
        let nudgeShown = true;

        let nudge3MessageId = null;
        let nudge1MessageId = null;

        document.getElementById('nudge1Button1').onclick = function () {
            onClickNudge1Button1()
        };

        function onClickNudge1Button1() {
            $('#nudge1Modal').modal('hide');
            $('#nudge1Modal2').modal('hide');
            sendMessage("Sorry, I don't want to share that");
            socket.emit("nudge-reaction", {
                messageId: nudge1MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        document.getElementById('nudge1Button2').onclick = function () {
            onClickNudge1Button2()
        };

        function onClickNudge1Button2() {
            $('#nudge1Modal').modal('hide');
            $('#nudge1Modal2').modal('hide');
            sendMessage("I don't feel comfortable sharing that");
            socket.emit("nudge-reaction", {
                messageId: nudge1MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        document.getElementById('nudge1Button3').onclick = function () {
            onClickNudge1Button3()
        };

        function onClickNudge1Button3() {
            $('#nudge1Modal').modal('hide');
            $('#nudge1Modal2').modal('hide');
            sendMessage("Lol that's private information");
            socket.emit("nudge-reaction", {
                messageId: nudge1MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        document.getElementById('nudge3Button1').onclick = function () {
            onClickNudge3Button1()
        };

        function onClickNudge3Button1() {
            $('#nudge3Card').hide();
            sendMessage("I don't feel comfortable sharing that info");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        document.getElementById('nudge3Button2').onclick = function () {
            onClickNudge3Button2()
        };

        function onClickNudge3Button2() {
            $('#nudge3Card').hide();
            sendMessage("Sorry, I don't know you");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        document.getElementById('nudge3Button3').onclick = function () {
            onClickNudge3Button3()
        };

        function onClickNudge3Button3() {
            $('#nudge3Card').hide();
            sendMessage("I don't think it's appropriate to ask that");
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "sendMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        document.getElementById('nudge3Button4').onclick = function () {
            onClickNudge3Button4()
        };

        function onClickNudge3Button4() {
            $('#nudge3Card').hide();
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "blockUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        document.getElementById('nudge3Button5').onclick = function () {
            onClickNudge3Button5()
        };

        function onClickNudge3Button5() {
            $('#nudge3Card').hide();
            socket.emit("nudge-reaction", {
                messageId: nudge3MessageId,
                userAction: "reportUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
        }

        socket.on("blocked", (msg) => { // this user blocked
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                                                <p><b>${chatPartnerUsername} has blocked you</b></p>
                                            </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            $('#messageInput').hide();
            location.reload()
        });

        socket.on("block-success", (msg) => { // blocked chat partner
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                                                <p><b>${chatPartnerUsername} has been blocked and reported</b></p>
                                            </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            $('#messageInput').hide();
            location.reload()
        });

        socket.on("reported", (msg) => { // this user reported
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                                                <p><b>${chatPartnerUsername} has reported you</b></p>
                                            </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            location.reload()
        });

        socket.on("report-success", (msg) => { // reported chat partner
            const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                                                <p><b>${chatPartnerUsername} has been reported</b></p>
                                            </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);
            location.reload()
        });

        async function sendMessage(msg) {
            await socket.emit('send-message', {
                msg: {
                    type: "txt",
                    body: msg
                },
                nudge: {
                    nudgeShown: nudgeShown,
                    riskyScenario: null,
                    nudgeType: null,
                    userAction: null,
                },
                to: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                    socketId: chatPartnerSocketId
                }
            });
        }

        const infoBreach1 = "Which school do you go to?";
        const infoBreach2 = "http://www.hahpics.xyz/4034-349i/";
        const infoBreach3 = "oh no way? Same. We should hang out sometime! What neighborhood do you live in?";
        const infoBreach3New = "I’d love to get to know u better"

        const explicitContent1 = "explicitContent1.png";

        $(() => {
            // fix bug1
            console.log('page load form addEventListener')
            $('#messageInput')[0].addEventListener('submit', async function (e) {
                e.preventDefault();
                console.log('emit message', {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                    socketId: chatPartnerSocketId
                })
                const input = $('#input')[0];
                let riskyScenario = null;
                let nudgeType = null;
                if (input.value) {
                    if (input.value == infoBreach1) {
                        console.log(infoBreach1)
                        riskyScenario = "infoBreach1"
                        nudgeType = "abstinence";
                    } else if (input.value == infoBreach2) {
                        console.log(infoBreach2)
                        riskyScenario = "infoBreach2"
                        nudgeType = "sensitivityFilter";
                    } else if (input.value == infoBreach3) {
                        console.log(infoBreach3)
                        riskyScenario = "infoBreach3"
                        nudgeType = "guidedActions";
                    } else if (input.value == infoBreach3New) {
                        console.log(infoBreach3New)
                        riskyScenario = "infoBreach3New"
                        //nudgeType = "userActions";
                        nudgeType = "sensitivityFilter"
                    }

                    $('#nudge3Card').hide();
                    console.log('send-message')
                    e.stopPropagation();
                    await socket.emit('send-message', {
                        msg: {
                            type: "txt",
                            body: input.value
                        },
                        nudge: {
                            nudgeShown: nudgeShown,
                            riskyScenario: riskyScenario,
                            nudgeType: nudgeType,
                            userAction: null,
                        },
                        to: {
                            username: chatPartnerUsername,
                            userId: chatPartnerUserId,
                            socketId: chatPartnerSocketId
                        }
                    });
                    input.value = '';
                }

                let file = uploadImage();

                if (file) {
                    if (file.type.includes("image")) {
                        if (file.name == explicitContent1) {
                            riskyScenario = "explicitContent1"
                            nudgeType = "abstinence";
                        }
                        socket.emit('send-message', {
                            msg: {
                                type: "img",
                                body: {path: file, filename: file.name}
                            },
                            nudge: {
                                nudgeShown: nudgeShown,
                                riskyScenario: riskyScenario,
                                nudgeType: nudgeType,
                                userAction: null,
                            },
                            to: {
                                username: chatPartnerUsername,
                                userId: chatPartnerUserId,
                                socketId: chatPartnerSocketId
                            }
                        });
                        document.getElementById("sending").style.display = "block"
                        document.getElementById('cancelImageUpload').style.display = 'none';
                    } else if (file.type.includes("video")) {
                        socket.emit('send-message', {
                            msg: {
                                type: "vid",
                                body: {path: file, filename: file.name}
                            },
                            to: {
                                username: chatPartnerUsername,
                                userId: chatPartnerUserId,
                                socketId: chatPartnerSocketId
                            }
                        });
                        document.getElementById("sending").style.display = "block"
                    }
                }
            });
        })

        // upload image
        function uploadImage() {
            let pictureFile;

            if (fileupload.files[0]) {

                if (fileupload.files[0].size >= 10000000) {
                    return null;
                }
                pictureFile = fileupload.files[0]
                document.getElementById('fileupload').value = "";
                return pictureFile;
            }
            return null;
        }

        // Event listener for the cross button
        document.getElementById('cancelImageUpload').addEventListener('click', function () {
            // Hide the image preview and the cross button
            document.getElementById('outputImage').style.display = 'none';
            this.style.display = 'none';
            // Reset the file input field
            document.getElementById('fileupload').value = '';
        });

        async function loadFile(event) {
            const image = document.getElementById('outputImage');
            const cancelBtn = document.getElementById('cancelImageUpload');
            const reader = new FileReader();

            if (fileupload.files[0]) {

                if (fileupload.files[0].size >= 10000000) {
                    alert("Image Size too large!")
                    fileupload.files[0] = null;
                    return;
                }

                if (fileupload.files[0].type.includes("image")) {
                    reader.readAsDataURL(fileupload.files[0])
                    reader.onload = function (e) {
                        const result = reader.result;
                        image.src = result;
                        image.style.display = "block";

                        image.onload = function () {
                            cancelBtn.style.display = 'block';
                            cancelBtn.style.position = 'absolute';
                            cancelBtn.style.left = `${image.offsetLeft + image.offsetWidth}px`;
                            cancelBtn.style.top = `${image.offsetTop}px`;
                        };
                    };

                } else {
                    // Hide the cancel button if no image is selected or the file is not an image
                    image.style.display = 'none';
                    cancelBtn.style.display = 'none';
                }

                if (fileupload.files[0].type.includes("video")) {
                    reader.readAsDataURL(fileupload.files[0])
                    reader.onload = function (e) {
                        const result = reader.result;
                        image.src = "https://cdn.iconscout.com/icon/free/png-256/video-file-85-1120664.png";
                        image.style.display = "block"
                    };
                }
            }
        }

        // get all messages
        socket.on("message-list", (messageList) => {
            let messageIds = [];
            for (let i = 0; i < messageList.length; i++) {
                if (messageList[i].from.userId == userId) {
                    addChatSentMessage(messageList[i].msg, messageList[i].msg.time, messageList[i]._id);
                    loadReactions(messageList[i].msg.reactions, messageList[i]._id)
                } else {
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach1) {
                        document.getElementById('dismissModal1Button').onclick = function () {
                            onClickShowMeModal(messageList[i])
                        };
                        document.getElementById('blockModal1Button').onclick = function () {
                            blockUserModal1(messageList[i])
                        }
                        //document.getElementById('reportButton').onclick=function(){reportUserModal1(messageList[i])}
                        document.getElementById('leaveModalButton').onclick = function () {
                            leaveUserModal(messageList[i])
                        }
                        $('#nudge1Modal').modal('setting', 'closable', false).modal('show');
                        $('#nudge1Modal2').modal('setting', 'closable', false).modal('show');
                        //$('#nudge3Card').modal('setting', 'closable', false).modal('show');
                        nudge1MessageId = messageList[i]._id;

                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].nudge.riskyScenario == "explicitContent1") {
                        console.log('link nudge')
                        $('#nudge2Modal').modal('setting', 'closable', false).modal('show');
                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach3) {
                        $('#nudge3Card').modal('setting', 'closable', false).show();
                        nudge3MessageId = messageList[i]._id;
                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach3New) {

                        document.getElementById('continueModal').onclick = function () {
                            onClickShowMeModal(messageList[i])
                        }
                        document.getElementById('dismissNudge2NewModal').onclick = function () {
                            onClickShowMeModal(messageList[i])
                        }
                        document.getElementById('leaveNudge2NewModal').onclick = function () {
                            leaveUserModal(messageList[i])
                        }
                        document.getElementById('leaveAndBlockNudge2NewModal').onclick = function () {
                            blockUserModal1(messageList[i])
                        }
                        //document.getElementById('reportNudge2NewModal').onclick=function(){reportUserModal1(messageList[i])}
                        $('#nudge2NewModal').modal('setting', 'closable', false).modal('show')

                    }
                    if (nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach2) {
                        //- document.getElementById('newNudge4ModalViewButton').onclick=function(){onClickShowMeModal(messageList[i])};
                        document.getElementById('dismissNudge4NewModal').onclick = function () {
                            onClickShowMeModal(messageList[i])
                        }
                        document.getElementById('newNudge4ModalDeleteButton').onclick = function () {
                            onClickNewDeleteButton(messageList[i])
                        };
                        document.getElementById('newNudge4ModalDeleteAndUpdateButton').onclick = function () {
                            onClickNewDeleteAndUpdateButton(messageList[i])
                        };
                        $('#newNudge4Modal').modal('setting', 'closable', false).modal('show')
                        console.log('newNudge4Modal show')

                        //addNudgeType2(messageList[i]);
                    } else {

                        if (!(nudgeShown && !messageList[i].msg.read && messageList[i].msg.body == infoBreach2)) {
                            console.log('adding message: ' + messageList[i].msg.body)
                            addChatReceivedMessage(messageList[i].msg, messageList[i].msg.time, messageList[i]._id, messageList[i].from.userId, messageList[i].nudge, false);
                            loadReactions(messageList[i].msg.reactions, messageList[i]._id)
                        } else {
                            console.log('not adding link explicit')
                        }
                    }
                }
                if (messageList[i].to.userId == userId && !messageList[i].msg.rea) {
                    messageIds.push(messageList[i]._id);
                }
            }
            socket.emit("read-messages", {
                messageIds: messageIds,
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });

            if (blocked.includes(chatPartnerUserId)) {
                const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                                                <p><b>${chatPartnerUsername} has been blocked</b></p>
                                            </div>`
                $('#messages').append(mes);
                $('#messages').scrollTop($('#messages')[0].scrollHeight);
                $('#messageInput').hide();
            }

            if (isBlocked.includes(chatPartnerUserId)) {
                const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                                                <p><b>${chatPartnerUsername} has blocked you</b></p>
                                            </div>`
                $('#messages').append(mes);
                $('#messages').scrollTop($('#messages')[0].scrollHeight);
                $('#messageInput').hide();
            }

            if (reported.includes(chatPartnerUserId)) {
                const mes = `<div class="centered row"  style="padding-top:6px; padding-bottom:6px">
                                                <p><b>${chatPartnerUsername} has been reported</b></p>
                                            </div>`
                $('#messages').append(mes);
                $('#messages').scrollTop($('#messages')[0].scrollHeight);
            }
        });

        function onClickDismissButton() {
            console.log("fas")
            $('#nudge1Modal').modal('hide');
            $('#nudge1Modal2').modal('hide');
            $('#nudge2Modal').modal('hide');
            $('#nudge2NewModal').modal('hide');
            $('#newNudge4Modal').modal('hide')
            $('#letOthersKnowAbout').modal('hide');
        }

        document.getElementById('dismissModal2Button').onclick = function () {
            onClickDismissButton()
        };

        document.getElementById('closeNudge3').onclick = function () {
            onClickCloseNudge3Button()
        };

        function onClickCloseNudge3Button() {
            $('#nudge3Card').hide();
        }

        socket.on("receive-message", async (msg) => {
            // update latest message in recent chat history
            let nudge2NewShown = false;
            let nudge1NewShown = false;
            partnerId = msg.from.userId == userId ? msg.to.userId : msg.from.userId;

            if (msg.from.userId == userId) {
                if (msg.msg.type == "img" || msg.msg.type == "vid") {
                    $(`#lastMessage-${partnerId}`).text("Sent media");
                } else {
                    $(`#lastMessage-${partnerId}`).text(msg.msg.body);
                }
            } else if (msg.msg.type == "txt" && msg.nudge.nudgeType == "sensitivityFilter" && msg.nudge.userAction == "") {
                $(`#lastMessage-${partnerId}`).text("Unread message");
            } else if (msg.msg.type == "txt") {
                $(`#lastMessage-${partnerId}`).text(msg.msg.body);
            } else {
                $(`#lastMessage-${partnerId}`).text("Sent media");
            }

            partnerUsername = msg.from.username == username ? msg.to.username : msg.from.username;
            partnerPFP = msg.from.username == username ? msg.to.userpfp : msg.from.userpfp;

            const userInDiscover = !usersInHistory.some(user => {
                if (user.userId == partnerId) {
                    return true;
                }
            });

            if (userInDiscover) {
                if (msg.to.userId == userId) {
                    addUserInHistory(partnerUsername, msg.msg.body, partnerId, 1, msg.msg.type);
                } else {
                    addUserInHistory(partnerUsername, msg.msg.body, partnerId, 0, msg.msg.type);
                }

                //$('#recentButton').show();
                //onClickRecentButton();

                usersInHistory.push({userId: partnerId, username: partnerUsername});
            }
            if (msg.from.userId == userId) {
                addChatSentMessage(msg.msg, msg.msg.time, msg._id);
            } else if (msg.to.userId == userId && msg.from.userId == chatPartnerUserId) {
                if (nudgeShown && msg.msg.body == infoBreach1) {
                    console.log(infoBreach1)
                    nudge1NewShown = true;
                    document.getElementById('dismissModal1Button').onclick = function () {
                        onClickShowMeModal(msg)
                    };
                    document.getElementById('blockModal1Button').onclick = function () {
                        blockUserModal1(msg)
                    }
                    //document.getElementById('reportButton').onclick=function(){reportUserModal1(msg)}
                    document.getElementById('leaveModalButton').onclick = function () {
                        leaveUserModal(msg)
                    }
                    $('#nudge1Modal').modal('setting', 'closable', false).modal('show');
                    $('#nudge1Modal2').modal('setting', 'closable', false).modal('show');
                    nudge1MessageId = msg._id;
                }
                if (nudgeShown && msg.nudge.riskyScenario == "explicitContent1") {
                    $('#nudge2Modal').modal('setting', 'closable', false).modal('show');
                }
                if (nudgeShown && msg.msg.body == infoBreach3) {
                    $('#nudge3Card').modal('setting', 'closable', false).show();
                    nudge3MessageId = msg._id;
                }
                if (nudgeShown && msg.msg.body == infoBreach2) {
                    // deals with newNudge4 buttons
                    console.log('newNudge4Modal show')
                    nudge2NewShown = true;
                    document.getElementById('newNudge4ModalViewButton').onclick = function () {
                        onClickShowMeModal(msg)
                    };
                    document.getElementById('newNudge4ModalDeleteButton').onclick = function () {
                        onClickNewDeleteButton(msg)
                    };
                    document.getElementById('newNudge4ModalDeleteAndUpdateButton').onclick = function () {
                        onClickNewDeleteAndUpdateButton(msg)
                    };
                    $('#newNudge4Modal').modal('setting', 'closable', false).modal('show')

                }
                if (nudgeShown && msg.msg.body == infoBreach3New) {
                    console.log(infoBreach3New)
                    document.getElementById('continueModal').onclick = function () {
                        onClickShowMeModal(msg)
                    }
                    document.getElementById('dismissNudge2NewModal').onclick = function () {
                        onClickShowMeModal(msg)
                    }
                    document.getElementById('leaveNudge2NewModal').onclick = function () {
                        leaveUserModal(msg)
                    }
                    document.getElementById('leaveAndBlockNudge2NewModal').onclick = function () {
                        blockUserModal1(msg)
                    }
                    //document.getElementById('reportNudge2NewModal').onclick=function(){reportUserModal1(msg)}
                    $('#nudge2NewModal').modal('setting', 'closable', false).modal('show')
                } else {
                    console.log(nudge2NewShown, nudge1NewShown)
                    if (!nudge2NewShown && !nudge1NewShown) {
                        console.log('adding adding message: ' + msg.msg.body)
                        addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
                    } else {
                        console.log('not adding the bad link')
                        nudge2NewShown = false;
                        nudge1NewShown = false;
                    }
                }
                socket.emit("read-messages", {
                    messageIds: [msg._id],
                    other: {
                        username: chatPartnerUsername,
                        userId: chatPartnerUserId,
                    }
                });
            } else if (msg.to.userId == userId) {

                $(`#redBubble-${msg.from.userId}`).text(Number($(`#redBubble-${msg.from.userId}`).text()) + 1);

                $(`#redBubble-${msg.from.userId}`).show();
            }

            document.getElementById("outputImage").style.display = "none"
            document.getElementById("sending").style.display = "none"
            document.getElementById("outputImage").src = "#"
        });


        function onClickShowMeModal(msg) {
            console.log("show me")
            onClickDismissButton();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "showMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $(`#lastMessage-${chatPartnerUserId}`).text(msg.msg.body);
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
        }

        // blocks user based upon msg for nudge 1
        function blockUserModal1(msg) {
            onClickDismissButton()
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "blockUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });

        }

        function reportUserModal1(msg) {
            onClickDismissButton()
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "reportUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });

        }

        function leaveUserModal(msg) {
            onClickDismissButton();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "leaveUser",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            // redirect to feed page
            window.location.href = '/'
        }

        function sendReaction(msg, person, reactionType, messageID) {
            let currentReaction;

            // get current reaction of message
            if (person == "self") {
                currentReaction = document.getElementById(`${messageID}-reactArea2`).innerHTML;
            } else {
                currentReaction = document.getElementById(`${messageID}-reactArea1`).innerHTML;
            }

            rct = emojiToText(currentReaction)

            if (rct == reactionType) { // if new reaction equal current reaction
                reactionType = "none"   //change to none
            }

            socket.emit('send-reaction', {
                messageID: messageID,
                person: person,
                reactionType: reactionType,
                reactions: msg.reactions,
                to: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                    socketId: chatPartnerSocketId
                }
            });
            document.getElementById(`${messageID}-react`).style.display = "none"
        }

        socket.on('receive-reaction', ({reactions, messageID, reactionType, person}) => {
            let emoji = "none";
            emoji = textToEmoji(reactionType)

            if (person == "self") {
                let selfElement = document.getElementById(`${messageID}-reactArea2`);
                selfElement.innerHTML = `${emoji}`;
            } else {
                let otherElement = document.getElementById(`${messageID}-reactArea1`);
                otherElement.innerHTML = `${emoji}`;
            }
        })

        // triggered when the user gets all messages
        function loadReactions(reactions, messageID) {
            let selfEmoji = "none";
            let otherEmoji = "none";

            selfEmoji = textToEmoji(reactions.self)
            let selfElement = document.getElementById(`${messageID}-reactArea2`);
            selfElement.innerHTML = `${selfEmoji}`;

            otherEmoji = textToEmoji(reactions.other)
            let otherElement = document.getElementById(`${messageID}-reactArea1`);
            otherElement.innerHTML = `${otherEmoji}`;
        }

        function textToEmoji(reaction) {
            if (reaction == "thumbsUp") {
                return "👍"
            } else if (reaction == "thumbsDown") {
                return "👎"
            } else if (reaction == "like") {
                return "❤️"
            } else if (reaction == "laugh") {
                return "😂"
            } else if (reaction == "none") {
                return ""
            }
        }

        function emojiToText(reaction) {
            if (reaction == "👍") {
                return "thumbsUp"
            } else if (reaction == "👎") {
                return "thumbsDown"
            } else if (reaction == "❤️") {
                return "like"
            } else if (reaction == "😂") {
                return "laugh"
            } else if (reaction == "") {
                return "none"
            }
        }

        //- function formatTime(time) {
        //-     let seen = false;
        //-     let idx = -1;
        //-     for (let i = 0; i < time.length; i++) {
        //-         if (time[i] == ':' && !seen)
        //-             seen = true;
        //-         else if (time[i] == ':' && seen)
        //-             idx = i;
        //-     }
        //-     return time.slice(0, idx) + time.slice(idx + 3);
        //- }

        //- function formatTime(time) {
        //-     console.log("time1", time);
        //-     // Convert 12-hour time to 24-hour time for parsing
        //-     let isPM = time.includes('pm');
        //-     let timeParts = time.match(/(\d+):(\d+):(\d+)/);
        //-     let hours = parseInt(timeParts[1], 10);
        //-     if (isPM && hours < 12) {
        //-         hours += 12;
        //-     } else if (!isPM && hours === 12) {
        //-         hours = 0;
        //-     }
        //-     // Ensuring two-digit hour format
        //-     hours = hours.toString().padStart(2, '0');

        //-     let fixedDate = `1970-01-01T${hours}:${timeParts[2]}:${timeParts[3]}Z`;
        //-     console.log("fixedDate", fixedDate);

        //-     let date = new Date(fixedDate);
        //-     console.log("date", date);
        //-     time = date.toLocaleTimeString('en-US', { hour12: true, hour: '2-digit', minute: '2-digit' });
        //-     console.log("time2", time);
        //-     let seen = false;
        //-     let idx = -1;
        //-     for (let i = 0; i < time.length; i++) {
        //-         if (time[i] == ':' && !seen)
        //-             seen = true;
        //-         else if (time[i] == ':' && seen)
        //-             idx = i;
        //-     }
        //-     console.log("time3", time)
        //-     return time.slice(0, idx) + time.slice(idx + 3);
        //- }

        function formatTime(time) {
            console.log("time1", time);
            // Convert 12-hour time to 24-hour time for parsing
            let isPM = time.includes('pm');
            let timeParts = time.match(/(\d+):(\d+):(\d+)/);
            let hours = parseInt(timeParts[1], 10);
            if (isPM && hours < 12) {
                hours += 12;
            } else if (!isPM && hours === 12) {
                hours = 0;
            }
            // Ensuring two-digit hour format
            hours = hours.toString().padStart(2, '0');

            let fixedDate = `1970-01-01T${hours}:${timeParts[2]}:${timeParts[3]}Z`;
            console.log("fixedDate", fixedDate);

            let date = new Date(fixedDate);
            console.log("date", date);
            time = date.toLocaleTimeString('en-US', {hour12: true, hour: '2-digit', minute: '2-digit'});
            console.log("time2", time);

            // Extracting just the HH:MM part
            let finalTime = time.match(/(\d+:\d+ [AP]M)/);
            return finalTime ? finalTime[0] : time; // Returns the extracted time or the original if no match
        }


        function addChatSentMessage(msg, time, id) {
            let msgType = "";

            if (msg.type == "txt") {
                msgType = `<p>${msg.body}</p>`

            } else if (msg.type == "img") {
                msgType = `<img src="https://socialsimulation.s3.amazonaws.com/${msg.body}" style ="height: auto; width: 200px; border-radius:6px; "></img>`
            } else if (msg.type == "vid") {
                msgType = `<video width="200" style="border-radius:6px" controls><source src="https://socialsimulation.s3.amazonaws.com/${msg.body}" type="video/mp4"></video>`
            }
            // reaction box
            const react = `<div  class="reactbox" tabindex="-1" id="${id}-react" div style="width:50%; height:20%; border-radius:23px; background-color:white; border: 2px solid grey; position:absolute;
                                                top:-10px; right:23px; z-index:100; display:none; justify-content: space-between; align-items:center; padding-left:12px; padding-right:12px;">
                                                <div id="${id}-thumbsup" style="cursor:pointer; user-select:none;">👍</div>
                                                <div id="${id}-thumbsdown" style="cursor:pointer; user-select:none;">👎</div>
                                                <div id="${id}-like" style="cursor:pointer; user-select:none;">❤️</div>
                                                <div id="${id}-laugh" style="cursor:pointer; user-select:none;">😂</div>
                                            </div>`

            const mes = ` <div class="row"  style="padding-top:6px; padding-bottom:6px">
                                                <div class="right floated right aligned seven wide column">
                                                ${react}
                                                <div class="ui mini blue compact message" id="${id}">
                                                    ${msgType}
                                                    <div id="${id}-reactArea1" style="border-radius:24px; background-color:white; position:absolute; left:2px;"></div>
                                                        <div id="${id}-reactArea2" style="border-radius:24px; background-color:white; position:absolute; left:14px;"></div>
                                                </div>
                                                <p style="font-size:10px; margin-top:-8px">${formatTime(time)}</p>
                                                </div>
                                            </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            // on click actions for showing reaction box
            $(`#${id}`).on('click', function () {
                $(`#${id}-react`).css('display', 'flex').focus();
            });
            // when the user clicks outside of reaction box, stop displaying it
            $(`#${id}-react`).on('focusout', function () {
                $(`#${id}-react`).css('display', 'none');
            });

            // onclick actions for reactions
            document.getElementById(`${id}-thumbsup`).onclick = function () {
                sendReaction(msg, "self", "thumbsUp", id)
            };
            document.getElementById(`${id}-thumbsdown`).onclick = function () {
                sendReaction(msg, "self", "thumbsDown", id)
            };
            document.getElementById(`${id}-like`).onclick = function () {
                sendReaction(msg, "self", "like", id)
            };
            document.getElementById(`${id}-laugh`).onclick = function () {
                sendReaction(msg, "self", "laugh", id)
            };
        }

        function addChatReceivedMessage(msg, time, id, user, nudge, messageDeleted) {
            console.log('addChatRecievedMessage', msg)
            let msgType = "";
            if (msg.type == "txt") {
                msgType = `<p>${msg.body}</p>`
                if (messageDeleted || nudge.nudgeType == "sensitivityFilter" && (nudge.userAction == "deleteMessage" || nudge.userAction == "deleteMessageAndLetOthersKnow")) {
                    msgType = `<p><b>deleted message</b></p>`
                }
            } else if (msg.type == "img") {
                msgType = `<img src="https://socialsimulation.s3.amazonaws.com/${msg.body}" style ="height: auto; width: 200px; border-radius:6px; "></img>`
            } else if (msg.type == "vid") {
                msgType = `<video width="200" style="border-radius:6px"  controls><source src="https://socialsimulation.s3.amazonaws.com/${msg.body}" type="video/mp4"></video>`
            }

            // reaction box
            const react = `<div tabindex="-1"  class="reactbox" id="${id}-react" div style="width:50%; height:20%; border-radius:23px; background-color:white; border: 2px solid grey; position:absolute;
                                            top:-10px; left:23px; z-index:100; display:none; justify-content: space-between; align-items:center; padding-left:12px; padding-right:12px;">
                                            <div id="${id}-thumbsup" style="cursor:pointer; user-select:none;">👍</div>
                                            <div id="${id}-thumbsdown" style="cursor:pointer; user-select:none;">👎</div>
                                            <div id="${id}-like" style="cursor:pointer; user-select:none;">❤️</div>
                                            <div id="${id}-laugh" style="cursor:pointer; user-select:none;">😂</div>
                                        </div>`

            const mes = ` <div class="row"  style="padding-top:6px; padding-bottom:6px">
                                                <div class="right aligned one wide column" style="padding:0!important"><img class="ui avatar image chatPartnerMessagePFP-${user}" id="" src=""/></div>
                                                <div class="seven wide column">
                                                    ${react}
                                                <div class="ui mini compact message" id="${id}">
                                                    ${msgType}
                                                    <div id="${id}-reactArea1" style="border-radius:24px; background-color:white; position:absolute; right:2px;"></div>
                                                    <div id="${id}-reactArea2" style="border-radius:24px; background-color:white; position:absolute; right:14px;"></div>
                                                </div>

                                                <p style="font-size:10px; margin-top:-8px">${formatTime(time)}</p>
                                                </div>
                                            </div>`
            $('#messages').append(mes);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            const x = document.getElementsByClassName(`chatPartnerMessagePFP-${user}`);

            for (i = 0; i < x.length; i++) {
                x[i].src = document.getElementById(`chatPartnerPFP-${user}`).src;
            }

            // on click actions for showing reaction box
            $(`#${id}`).on('click', function () {
                $(`#${id}-react`).css('display', 'flex').focus();
            });

            // when the user clicks outside of reaction box, stop displaying it
            $(`#${id}-react`).on('focusout', function () {
                $(this).css('display', 'none');
            });

            // onclick actions for reactions
            //- document.getElementById(`${id}-thumbsup`).onclick=function(){readMessage(id, "test321", "bdskdbkjads")};

            document.getElementById(`${id}-thumbsup`).onclick = function () {
                sendReaction(msg, "other", "thumbsUp", id)
            };
            document.getElementById(`${id}-thumbsdown`).onclick = function () {
                sendReaction(msg, "other", "thumbsDown", id)
            };
            document.getElementById(`${id}-like`).onclick = function () {
                sendReaction(msg, "other", "like", id)
            };
            document.getElementById(`${id}-laugh`).onclick = function () {
                sendReaction(msg, "other", "laugh", id)
            };
        }


        function onClickNewDeleteButton(msg) {
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $(`#lastMessage-${chatPartnerUserId}`).text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);
            onClickDismissButton()
        }

        function onClickNewDeleteAndUpdateButton(msg) {
            console.log('onClickDeleteAndLetOthersKnowButton')
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessageAndLetOthersKnow",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $(`#lastMessage-${chatPartnerUserId}`).text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);

            onClickDismissButton()
        }


        function addNudgeType2(msg) {
            const nudge = `<div class="row" id="nudgeType2" style="padding-top:6px; padding-bottom:6px">
                                                <div class="right aligned one wide column" style="padding:0!important"></div>
                                                <div class="seven wide column">
                                                    <div class="ui cards">
                                                        <div class="card" style="min-width:400px">
                                                            <div class="content" style="text-align:center">
                                                                <div class="description"> The last message you received is censored due to potentially harmful content. <a style="color:blue" href="http://risk_information">
                                                                    <u>Learn why this is harmful.</u>
                                                                </a> Are you sure you want to view this message?</div>
                                                            </div>
                                                            <div class="extra content">
                                                                <div class="ui three buttons">
                                                                    <div class="ui basic black button" id="showMeButton">View</div>
                                                                    <div class="ui basic black button" id="deleteMessageButton">Delete & Dismiss</div>
                                                                    <div class="ui basic black button" id="deleteMessageAndLetOthersKnowButton">Delete & Let Others Know</div>

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <p style="font-size:10px; margin-top:-8px">${formatTime(msg.msg.time)}</p>
                                                </div>
                                            </div>`

            $('#messages').append(nudge);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            let element = document.getElementById("nudgeType2");
            element.id = msg._id + 'nudgeType2';

            element = document.getElementById("deleteMessageButton");
            element.id = msg._id + 'deleteMessageButton';

            element = document.getElementById("showMeButton");
            element.id = msg._id + 'showMeButton';

            element = document.getElementById("deleteMessageAndLetOthersKnowButton");
            element.id = msg._id + 'deleteMessageAndLetOthersKnowButton';

            document.getElementById(msg._id + 'deleteMessageButton').onclick = function () {
                onClickDeleteMessageButton(msg)
            };
            document.getElementById(msg._id + 'showMeButton').onclick = function () {
                onClickShowMeButton(msg)
            };
            document.getElementById(msg._id + 'deleteMessageAndLetOthersKnowButton').onclick = function () {
                onClickDeleteAndLetOthersKnowButton(msg)
            }
        }

        function onClickDeleteAndLetOthersKnowButton(msg) {
            console.log('onClickDeleteAndLetOthersKnowButton')
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessageAndLetOthersKnow",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $(`#lastMessage-${chatPartnerUserId}`).text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);
        }

        function onClickDeleteMessageButton(msg) {
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "deleteMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $(`#lastMessage-${chatPartnerUserId}`).text("Deleted message");
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, true);
        }

        function onClickShowMeButton(msg) {
            document.getElementById(msg._id + 'nudgeType2').remove();
            socket.emit("nudge-reaction", {
                messageId: msg._id,
                userAction: "showMessage",
                other: {
                    username: chatPartnerUsername,
                    userId: chatPartnerUserId,
                }
            });
            $(`#lastMessage-${chatPartnerUserId}`).text(msg.msg.body);
            addChatReceivedMessage(msg.msg, msg.msg.time, msg._id, chatPartnerUserId, msg.nudge, false);
        }


        socket.on("letOthersKnowLinkNudge", (harmfulContentString) => {
            // TODO: CREATE MODAL TO SHOW THIS MESSAGE
            console.log(harmfulContentString + ' Learn more about why this is harmful.')
            $('#letOthersKnowAbout').modal('setting', 'closable', false).modal('show');
            // change the text to waringStr
            const warningStr = harmfulContentString + ' Learn more about why this is harmful.'
            $('#letOthersKnowAboutContent').text(warningStr)
        })
        document.getElementById('dismissModalEveryoneButton').onclick = function () {
            onClickDismissButton()
        };